{1,
{22,
{"artbear",1,0,"",""},
{3,
{"Комментарии",1,0,"",""},
{0,
{"Комментарии",0,1,"арт","// -- Артур -- <?"""", ДатаВремя, ""ДЛФ=D"">
<?>
// --завершение"}
},
{0,
{"Коммент_Метаданные",0,1,"артмета","// -- Артур -- TODO_МЕТАДАННЫЕ - <?> <?"""", ДатаВремя, ""ДЛФ=D"">"}
},
{0,
{"Вставка <"" + ? +"">",0,1,"<>","<"" + <?> + "">"}
}
},
{0,
{"Отладка",0,1,"отл","Сообщить(""<?""Введите переменную""> = <""+?(<?""Введите переменную""> = Неопределено, ""Неопределено"", <?""Введите переменную"">)+"">"");<?>"}
},
{1,
{"TormozIT",1,0,"",""},
{0,
{"Лкс<?""Объект""><?><?""Событие"">()",0,1,"лксОбъект","// Процедура - обработчик события ""<?""Событие"">"" элемента формы ""<?""Объект"">"".
//
<?>Процедура Лкс<?""Объект""><?><?""Событие"">()

	<?>
	Выполнить(ЛксПолучитьСтароеДействиеФормы(ЭтаФорма, ""<?""Событие"">"", ""<?""Объект"">""));	

КонецПроцедуры // Лкс<?""Объект""><?><?""Событие"">()

ЛксУстановитьДействиеФормы(ЭтаФорма, ""<?""Событие"">"", ""<?""Объект"">"");"}
}
},
{0,
{"Выбор периода",0,1,"ВыборП[ериода]","НастройкаПериода = Новый НастройкаПериода;
НастройкаПериода.РедактироватьКакИнтервал = Истина;
НастройкаПериода.РедактироватьКакПериод = Истина;
НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
НастройкаПериода.УстановитьПериод(<?""Введите перем. - дату начала"">, <?""Введите перем. - дату окончания"">);
Если НастройкаПериода.Редактировать() Тогда
	<?""Введите перем. - дату начала""> = НастройкаПериода.ПолучитьДатуНачала();
	<?""Введите перем. - дату окончания""> = НастройкаПериода.ПолучитьДатуОкончания();
КонецЕсли;
"}
},
{7,
{"Запросы",1,0,"",""},
{0,
{"Заполнить временную таблицу из внешнего источника",0,1,"","// Сначала помещаем ТЗ во временную таблицу
Запрос = Новый Запрос;
Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

Запрос.Текст = ""ВЫБРАТЬ * ПОМЕСТИТЬ ВТ_Таб ИЗ &Таб КАК Таб"";
Запрос.УстановитьПараметр(""Таб"", Таб);
Запрос.Выполнить();

// Теперь ТЗ можно использовать в запросе:
Запрос.Текст = ""
	|ВЫБРАТЬ
	|	ТЗ.Номенклатура,
	|	Остатки.КоличествоОстаток
	|ИЗ
	|	ВТ_Таб КАК ТЗ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки() КАК Остатки
	|ПО
	|	ТЗ.Номенклатура=Остатки.Номенклатура"";
	
Выборка = Запрос.Выполнить().Выбрать();"}
},
{0,
{"Процедура - Создать временную таблицу",0,0,"","Процедура СоздатьВременнуюТаблицу(Источник, имяВременнойТаблицы, МенеджерВременныхТаблиц)
		//артТесты.ПроверитьЗаполненность(Источник, ""Источник"");
		//артТесты.ПроверитьЗаполненность(МенеджерВременныхТаблиц, ""МенеджерВременныхТаблиц"");
	// Сначала помещаем ТЗ во временную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ""ВЫБРАТЬ * ПОМЕСТИТЬ ""+имяВременнойТаблицы+"" ИЗ &Источник КАК Источник"";
	Запрос.УстановитьПараметр(""Источник"", Источник);
	Запрос.Выполнить();
КонецПроцедуры
"}
},
{0,
{"Процедура - Уничтожить временную таблицу",0,0,"","Процедура УничтожитьВременнуюТаблицу(имяВременнойТаблицы, МенеджерВременныхТаблиц)
		артТесты.ПроверитьЗаполненность(МенеджерВременныхТаблиц, ""МенеджерВременныхТаблиц"");
	// Сначала помещаем ТЗ во временную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ""Уничтожить ""+имяВременнойТаблицы;
	Попытка
		Запрос.Выполнить();
	Исключение
	КонецПопытки;
КонецПроцедуры
"}
},
{0,
{"Отладка запроса 8.2",0,0,"","ВнешниеОбработки.Создать(""W:\Запросы\УКО_82\UCR_82.epf"").ОткрытьДляОтладки(Запрос)"}
},
{0,
{"Отладка запроса 8.1",0,0,"","ВнешниеОбработки.Создать(""W:\Запросы\УКО\UCR.epf"").ОткрытьДляОтладки(Запрос)"}
},
{0,
{"ЕСТЬNULL(<?>, 0)",0,0,"","<%Макрос ""Запросы: ЕСТЬNULL(<?>, 0)"">
ЕСТЬNULL(<?>, 0)"}
},
{0,
{"ЕСТЬNULL(<?>, |)",0,0,"","<%Макрос ""Запросы: ЕСТЬNULL(<?>, |)"">
ЕСТЬNULL(<?>, <?""|Условие"">)"}
}
},
{12,
{"Тестирование",1,0,"",""},
{0,
{"xUnitFor1C - Тестовый метод",0,1,"Проц[едураТест]","Процедура ТестДолжен_<?>() Экспорт
	ВызватьИсключение ""Тест не реализован"";
КонецПроцедуры"}
},
{0,
{"xUnitFor1C - Вставить тестовый метод",0,1,"юнит","Процедура ТестДолжен_<?>() Экспорт
	ВызватьИсключение ""Тест не реализован"";
КонецПроцедуры"}
},
{0,
{"xUnitFor1C - шаблон тестового набора ( модуль )",0,1,"юнит","Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;

//{ основные процедуры для юнит-тестирования xUnitFor1C

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
	Утверждения = КонтекстЯдра.Плагин(""БазовыеУтверждения"");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин(""СериализаторMXL"");
	ЗапросыИзБД = КонтекстЯдра.Плагин(""ЗапросыИзБД"");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин(""УтвержденияПроверкаТаблиц"");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	//НаборТестов.НачатьГруппу(""Сценарный тест"", Истина);
	//НаборТестов.Добавить(""ПараметрическийТест"", НаборТестов.ПараметрыТеста(5, 7), ""Тест должен показать использование представления теста"");
		//Тест = НаборТестов.Добавить(""ПараметрическийТест2"");
		//Тест.Параметры.Добавить(12);
	НаборТестов.Добавить(""<?>ТестДолжен_"");
КонецПроцедуры
//}

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 
КонецПроцедуры

Процедура <?>ТестДолжен_() Экспорт
	ВызватьИсключение ""Тест не реализован"";
КонецПроцедуры

//} 
"}
},
{0,
{"xUnitFor1C - шаблон тестового набора (  УФ  ) ",0,1,"юнит","&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ГенераторТестовыхДанных;
&НаКлиенте
Перем ЗапросыИзБД;
&НаКлиенте
Перем УтвержденияПроверкаТаблиц;

//{ основная процедура для юнит-тестирования xUnitFor1C

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
	Утверждения = КонтекстЯдра.Плагин(""БазовыеУтверждения"");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин(""СериализаторMXL"");
	ЗапросыИзБД = КонтекстЯдра.Плагин(""ЗапросыИзБД"");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин(""УтвержденияПроверкаТаблиц"");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	//НаборТестов.НачатьГруппу(""Сценарный тест"", Истина);
	НаборТестов.Добавить(""<?>ТестДолжен_"");
КонецПроцедуры
//}

//{ блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_<?>() Экспорт
	ВызватьИсключение ""Тест не реализован"";
КонецПроцедуры

//} конец блока юнит-тестов
"}
},
{0,
{"xUnitFor1C - шаблон тестового набора ( модуль ) v3",0,0,"юнит","
//{ основная процедура для юнит-тестирования xUnitFor1C
Перем ЮТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

			//ЮТест.ДобавитьПростыеТестыИзОбъекта(ВсеТесты, ЭтотОбъект);
				
			//параметрыТеста = Новый Структура();
			//описаниеТеста = Новый Структура(""ИмяТеста,Параметр"", ""ПараметрическийТест"", параметрыТеста);
			//ВсеТесты.Добавить(описаниеТеста);
	
	ВсеТесты.Добавить(""ТестДолжен_"");

	Возврат ВсеТесты;
	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 
КонецПроцедуры

Процедура ТестДолжен_() Экспорт
	ВызватьИсключение ""Тест не реализован"";
КонецПроцедуры

//} "}
},
{0,
{"xUnitFor1C - шаблон тестового набора (  УФ  )  v3",0,0,"юнит","&НаКлиенте
Перем ЮТест;  // для тестирования

//{ основная процедура для юнит-тестирования xUnitFor1C
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить(""ТестДолжен_"");

	Возврат ВсеТесты;	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_<?>() Экспорт
	ВызватьИсключение ""Тест не реализован"";
КонецПроцедуры

//} конец блока юнит-тестов
"}
},
{0,
{"xUnitFor1C - шаблон теста-сценария GUI для 8.3  v3",0,0,"юнит","&НаКлиенте
Перем юТест;  // для тестирования

&НаКлиенте
Перем массивТестовыхПриложений;

//{ основная процедура для юнит-тестирования xUnitFor1C
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить(""ТестДолжен_ВыполнитьСценарныйТест_ГУИ_83"");
		//ВсеТесты.Добавить(""ТестДолжен_ВыполнитьСценарныйТест_ГУИ_83_ДваПриложения"");
		
			//параметрыТеста = Новый Структура(""ВерсияПлатформы,путь1С,Транзакция"", ""8.3.3.641"", ""C:\Program Files (x86)\1cv8\8.3.3.641\bin\1cv8.exe"",Истина);
			//описаниеТеста = Новый Структура(""ИмяТеста,Параметр"", ""ОТест_ОпределитьПравильныйПутьКПлатформеПоВерсииПлатформы"", параметрыТеста);
			//ВсеТесты.Добавить(описаниеТеста);
	
	Возврат ВсеТесты;
	
КонецФункции

//{ БЛОК ЮНИТ-ТЕСТОВ - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
	юТест.ВывестиСообщение(""Перед запуском теста"");
	массивТестовыхПриложений = Новый Массив;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	юТест.ВывестиСообщение(""После запуска теста"");
	ЗавершитьВсеСеансыРаботыСТестовымиПриложениями();
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ВыполнитьСценарныйТест_ГУИ_83() Экспорт
	//Предупреждение(массивТестовыхПриложений.Количество(), 1);
	имяПользователя = ""Роль1"";
	Порт = 1577;
	ТаймаутОжиданияПриложенияВСекундах = 20;
	
	тестовоеПриложение = ЗапуститьТестовоеПриложение(имяПользователя, Порт, ТаймаутОжиданияПриложенияВСекундах);
	
	//ТестовыйСценарий_25_09_2013(тестовоеПриложение);

КонецПроцедуры

&НаКлиенте
Функция ЗапуститьТестовоеПриложение(ИмяПользователя, Порт, ТаймаутОжиданияПриложенияВСекундах)
	Перем тестовоеПриложение;
	строкаЗапуска = ПолучитьСтрокуЗапуска(ИмяПользователя, Порт);
	//Предупреждение(""строкаЗапуска ""+Символы.ПС+строкаЗапуска, 3);
	//Предупреждение(""Порт ""+Порт);
 	ЗапуститьПриложение(строкаЗапуска);
	тестовоеПриложение = Новый ТестируемоеПриложение(, XMLСтрока(Порт));

	Подключен = Ложь;
	ВремяОкончанияОжидания = ТекущаяДата() + ТаймаутОжиданияПриложенияВСекундах; //60;
	ОписаниеОшибкиСоединения = """";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			тестовоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

	сообщениеОшибки = ""Не смогли установить соединение с тестовым приложением для пользователя ""+ИмяПользователя+"" !"" + Символы.ПС + ОписаниеОшибкиСоединения; 
		//юТест.ПроверитьИстину(Подключен, сообщениеОшибки);
	Если Не Подключен Тогда 
    	тестовоеПриложение = Неопределено;
		ВызватьИсключение сообщениеОшибки;
	КонецЕсли;
	
	массивТестовыхПриложений.Добавить(тестовоеПриложение);

	Возврат тестовоеПриложение;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВсеСеансыРаботыСТестовымиПриложениями()
	Если массивТестовыхПриложений.Количество() <> 0 Тогда
		Для Каждого Подопытный Из массивТестовыхПриложений Цикл
			Подопытный.РазорватьСоединение();
		КонецЦикла;	

		ЗавершитьВсеТестовыеПриложенияПринудительно();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеТестовыеПриложенияПринудительно()
		юТест.ПроверитьЗаполненность(массивТестовыхПриложений.Количество(), ""массивТестовыхПриложений.Количество()"");

	Scr = Новый COMОбъект(""MSScriptControl.ScriptControl"");
	Scr.Language = ""vbscript"";
	Scr.AddCode(""
		|Option Explicit
		|
		|Dim objWMIService, objProcess, colProcess
		|
		|Set objWMIService = GetObject(""""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"""") 
		|
		|Set colProcess = objWMIService.ExecQuery(""""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"""")
		|
		|For Each objProcess in colProcess
		|	objProcess.Terminate()
		|Next
		|"");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуЗапуска(ИмяПользователя = """", Порт = """")
		//Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		//	ИмяПользователя = ""Администратор"";
		//КонецЕсли;	
	
	Результат = КаталогПрограммы() + ""1cv8c.exe ENTERPRISE "" +
		""/IBConnectionString"""""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """""""", """""""""""") + """""""" +
		""/N"""""" + ИмяПользователя + """""""" + 
		"" /TESTCLIENT -TPort"" + XMLСтрока(Порт);

	Возврат Результат;
КонецФункции
//} КОНЕЦ БЛОКА ЮНИТ-ТЕСТОВ"}
},
{0,
{"xUnitFor1C - в рабочую обработку шаблон тестового набора ( модуль )  v3",0,0,"юнит","
//{ основная процедура для юнит-тестирования xUnitFor1C
Перем _тестируем; // для тестирования
Перем ЮТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

			//ЮТест.ДобавитьПростыеТестыИзОбъекта(ВсеТесты, ЭтотОбъект);
				
			//параметрыТеста = Новый Структура(""ВерсияПлатформы,путь1С,Транзакция"", ""8.3.3.641"", ""C:\Program Files (x86)\1cv8\8.3.3.641\bin\1cv8.exe"",Истина);
			//описаниеТеста = Новый Структура(""ИмяТеста,Параметр"", ""ОТест_ОпределитьПравильныйПутьКПлатформеПоВерсииПлатформы"", параметрыТеста);
			//ВсеТесты.Добавить(описаниеТеста);
	
	ВсеТесты.Добавить(""ТестДолжен_"");

	Возврат ВсеТесты;
	
КонецФункции
//}

//{ основной блок

//} 

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	_тестируем = Истина;
	НачатьТранзакцию();	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	_тестируем = Ложь;
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 
КонецПроцедуры

Процедура ТестДолжен_() Экспорт
	ВызватьИсключение ""Тест не реализован"";
КонецПроцедуры

_тестируем = Ложь;

//} "}
},
{0,
{"FuncTest Шаблон произвольной обработки / отчета",0,0,"","Перем	_выполняемТест;

// ============================  ============================  ============================  
//
// Блок для тестирования обработки/отчета в FunctTest
//
// ============================  ============================  ============================  

//	начальное заполнение данных при создании теста - необязательный метод
Функция ПервоначальноеЗаполнениеДанныхТеста(данныеДляТестирования) Экспорт
	тест = данныеДляТестирования.Тест;
	//тест.УстановитьУсловиеЕслиОноНеЗаполнено(""ВыбДата1"", '00010101');
	//тест.УстановитьУсловиеЕслиОноНеЗаполнено(""ВыбДата2"", '00010101');
	//тест.УстановитьУсловиеЕслиОноНеЗаполнено(""ВыбКлиент"", Справочники.Контрагенты.ПустаяСсылка());
	//тест.УстановитьУсловие(""ВыбСчет"", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	//тест.УстановитьУсловиеЕслиОноНеЗаполнено(""_ВыбранныйВариантОтчета"", ""Кратко"");

	Возврат Истина;
КонецФункции

// выполнить перед тестированием какие-то начальные действия, инициализацию, открыть ресурсы (например, создать файлы)
Функция Инит(данныеДляТестирования) Экспорт	
	//тест = данныеДляТестирования.тест;
	//	артТесты.ПроверитьЗаполненность(тест, ""тест"");
	_выполняемТест = Истина;
	Возврат Истина;
КонецФункции

// после тестирования завершить действия, закрыть ресурсы (например, удалить файлы)
Функция Сброс() Экспорт	
	_выполняемТест = Ложь;
	Возврат Истина;
КонецФункции

// основной метод - должен вернуть таблицу значений
Функция ПолучитьОжидания(данныеДляТестирования) Экспорт	
		//таблицаЗначений = Новый ТаблицаЗначений;	
	тест = данныеДляТестирования.тест;
		//	артТесты.ПроверитьЗаполненность(тест, ""тест"");
		
	тест.ЗаполнитьРеквизитыПриемникаУсловиямиТеста(ЭтотОбъект);
	
	//выбСклад1 = тест.ПолучитьУсловие(""ВыбСклады""); // для списка значений
	//Если ЗначениеЗаполнено(выбСклад1) Тогда
	//	ЭтотОбъект.ВыбСклады.Добавить(выбСклад1);
	//КонецЕсли; 
	
	табДок = Неопределено;
	вариантОтчета = тест.ПолучитьУсловие(""_ВыбранныйВариантОтчета"");
	Если вариантОтчета = ""Кратко"" Тогда
	//	табДок = ЭтотОбъект.Кратко();
	КонецЕсли;
	
	Возврат Неопределено; //если табличный документ просто выводится на экран
	//Возврат табДок; // если получаю сам табличный документ
КонецФункции
 
// необязательная виртуальная функция-событие - вызывается при начале выбора условия тестирования в браузере тестов
//	класс-наследник может выполнить при этом некие действия
// 	Если класс не обрабатывает это событие, тогда он должен вернуть Ложь
//	Если класс обрабатывает событие, тогда он должен вернуть Истина 
//	В этом случае в параметре СтандартнаяОбработка нужно вернуть значение, должна ли система обработать это событие или нет
//	т.е. значение параметра возвращается в событие НачалоВыбора(Элемент, СтандартнаяОбработка)
Функция ИзменитьЭлементУправления_ЗначениеУсловияТестирования(Тест, СтандартнаяОбработка, НаименованиеУсловия, ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение) Экспорт
	//Если НаименованиеУсловия <> ИмяУсловия_ФайлОбработки Тогда
	//	Возврат Ложь;
	//КонецЕсли; 
	//
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.Значение = Неопределено;
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.ОграничениеТипа = Новый ОписаниеТипов(Новый Массив);
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.Значение = Неопределено;
	//
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.КнопкаОткрытия = Истина;
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.КнопкаОчистки = Ложь;
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.КнопкаВыбора = Ложь;
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.ВыбиратьТип = Ложь;
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.АвтоОтметкаНезаполненного = Истина;
	////ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.ТолькоПросмотр = Истина;
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.РедактированиеТекста = Ложь;
	//
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.КнопкаСпискаВыбора = Истина;
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.РежимВыбораИзСписка = Истина;
	//
	//ЭлементУправления_ВходныеУсловияТеста_КолонкаЗначение.СписокВыбора = ПолучитьДанныеПечатныхФорм(Тест).Список;
	
	Возврат Истина;
КонецФункции

// примерный метод для вывода сообщений об ошибках в лог тестирования
Процедура СообщитьОбОшибкеТестирования(Сообщение)
	//Если ТекстЛог = Неопределено Тогда
	//	Сообщить(Сообщение, СтатусСообщения.ОченьВажное);
	//Иначе
	//	ТекстЛог.ДобавитьСтроку(Сообщение);
	//	ТекстЛог.ДобавитьСтроку(Символы.ПС);
	//КонецЕсли; 
КонецПроцедуры

//
// конец блока тестирования обработки/отчета в FunctTest
//
// ============================  ============================  ============================  

_выполняемТест = Ложь;
"}
},
{0,
{"ПолучитьСписокТестов() SnowTest",0,0,"","Перем _тестируем; // для тестирования

// основная процедура для юнит-тестирования SnowTest
Функция ПолучитьСписокТестов() Экспорт
	Результат = Я_Тест.Новый_НаборТестов();
	
#Если Клиент Тогда

	Я_Тест.НаборТестов_Добавить(Результат, ""Тесты_<?>"");
		//Я_Тест.НаборТестов_Добавить(Результат, ""Тесты_<?>"", ""_тест_Инит"", ""_тест_Сброс"");
	
#КонецЕсли		
	
	Возврат Результат;
КонецФункции

//{ ======================= ОСНОВНОЙ БЛОК ======================= ================================
//
// ======================= ======================= ======================= ======================= 


// ======================= КОНЕЦ ОСНОВНОГО БЛОКА ======================= =========================
//
// ======================= ======================= ======================= ======================= }

//{ ======================= БЛОК ЮНИТ-ТЕСТОВ - сами тесты ========================================
//
// ======================= ======================= ======================= ======================= 
#Если Клиент Тогда

Процедура Тесты_<?>() Экспорт
КонецПроцедуры

Процедура _тест_Инит(докСсылка = Истина) Экспорт  // докСсылка = Истина чтобы не передавать неопределено (это ошибка)
	_тестируем = Истина;
	
		//глОбщиеЗначения.Вставить(""глТестированиеЗапущено"", Истина);
	
		артТесты.ПроверитьЗаполненность(докСсылка, ""_тест_Инит докСсылка"");
		
		//Если докСсылка = Истина Тогда докСсылка = Неопределено; КонецЕсли;
	
		//Если НЕ ЗначениеЗаполнено(докСсылка) Тогда
		//	лДокРН = Документы.РасходнаяНакладная.НайтиПоНомеру(""_00000008"", '20120216');
		//		артТесты.ПроверитьЗаполненность(лДокРН, ""_тест_Инит лДокРН"");
		//Иначе
		//	лДокРН = докСсылка;
		//КонецЕсли;
	
КонецПроцедуры

Процедура _тест_Сброс() Экспорт
	_тестируем = Ложь;
		//глОбщиеЗначения.Вставить(""глТестированиеЗапущено"", Ложь);
КонецПроцедуры

#КонецЕсли		

_тестируем = Ложь;

// ======================= ======================= ======================= ======================= 
//
// КОНЕЦ БЛОКА ЮНИТ-ТЕСТОВ
//
// ======================= ======================= ======================= ======================= }
"}
},
{22,
{"Утверждения",1,0,"",""},
{0,
{"ПроверитьРавенство",0,0,"утв","Утверждения.ПроверитьРавенство(<?>, , """");"}
},
{0,
{"Проверить Неравенство",0,0,"утв","Утверждения.ПроверитьНеРавенство(<?>, , """");"}
},
{0,
{"Проверить",0,0,"утв","Утверждения.Проверить(<?>Истина, """");"}
},
{0,
{"ПроверитьБольше",0,0,"утв","Утверждения.ПроверитьБольше(<?>Больше, ?Меньше, """");"}
},
{0,
{"ПроверитьЗаполненность",0,0,"утв","Утверждения.ПроверитьЗаполненность(<?>, """");"}
},
{0,
{"ПроверитьЛожь",0,0,"утв","Утверждения.ПроверитьЛожь(<?>Ложь, """");"}
},
{0,
{"ПроверитьДату",0,0,"утв","Утверждения.ПроверитьДату(<?>Дата, ?Период, """");"}
},
{0,
{"ПроверитьРавенствоДатСТочностью2Секунды",0,0,"утв","Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(<?>Дата1, ?Дата2, """");"}
},
{0,
{"ПроверитьБольшеИлиРавно",0,0,"утв","Утверждения.ПроверитьБольше(<?>Больше, ?Меньше, """");"}
},
{0,
{"ПроверитьМеньше",0,0,"утв","Утверждения.ПроверитьМеньшеИлиРавно(<?>Меньше, ?Больше, """");"}
},
{0,
{"ПроверитьМеньшеИлиРавно",0,0,"утв","Утверждения.ПроверитьМеньшеИлиРавно(<?>Меньше, ?Больше, """");"}
},
{0,
{"ПроверитьВыполнилось",0,0,"утв","Утверждения.ПроверитьВыполнилось(""<?>СтрокаВыполнения"", ?ПараметрыИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьМетодВыполнился",0,0,"утв","Утверждения.ПроверитьМетодВыполнился(<?>Объект, ""ИмяМетода"", ?ПараметрыИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьНеВыполнилось",0,0,"утв","Утверждения.ПроверитьНеВыполнилось(""<?>СтрокаВыполнения"", ?ПараметрыИлиОжидаемоеОписаниеОшибки, ?ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьМетодНеВыполнился",0,0,"утв","Утверждения.ПроверитьМетодНеВыполнился(<?>Объект, ""ИмяМетода"", ?ПараметрыИлиОжидаемоеОписаниеОшибки, ?ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьНеЗаполненность",0,0,"утв","Утверждения.ПроверитьЗаполненность(<?>, """");"}
},
{0,
{"ПроверитьТип",0,0,"утв","Утверждения.ПроверитьТип(<?>, ?ТипИлиИмяТипа, """");"}
},
{0,
{"ПроверитьВхождение",0,0,"утв","Утверждения.ПроверитьВхождение(<?>, ?ПодстрокаПоиска, """");"}
},
{0,
{"ПроверитьВхождениеВКоллекцию",0,0,"утв","Утверждения.ПроверитьВхождениеВКоллекцию(<?>, ?Коллекция, """");"}
},
{0,
{"ПроверитьВалидностьЗапросаСКД",0,0,"утв","Утверждения.ПроверитьВалидностьЗапросаСКД(<?>, """");"}
},
{0,
{"ПроверитьНаличиеОбъектаИБ",0,0,"утв","Утверждения.ПроверитьНаличиеОбъектаИБ(<?>, """");"}
},
{0,
{"ПроверитьРавенствоФайлов",0,0,"утв","Утверждения.ПроверитьРавенствоФайлов(?ПутьФайла1, ?ПутьФайла2, ?ДопСообщениеОшибки = """", ?ПарамСравнениеФайлов = Неопределено, ?ПоказатьРазличия = Ложь);"}
}
},
{22,
{"Утверждения v3",1,0,"",""},
{0,
{"ПроверитьРавенство",0,0,"пров","юТест.ПроверитьРавенство(<?>, , """");"}
},
{0,
{"Проверить Неравенство",0,0,"пров","юТест.ПроверитьНеРавенство(<?>, , """");"}
},
{0,
{"Проверить",0,0,"пров","юТест.Проверить(<?>Истина, """");"}
},
{0,
{"ПроверитьБольше",0,0,"пров","юТест.ПроверитьБольше(<?>Больше, ?Меньше, """");"}
},
{0,
{"ПроверитьЗаполненность",0,0,"пров","юТест.ПроверитьЗаполненность(<?>, """");"}
},
{0,
{"ПроверитьЛожь",0,0,"пров","юТест.ПроверитьЛожь(<?>Ложь, """");"}
},
{0,
{"ПроверитьДату",0,0,"пров","юТест.ПроверитьДату(<?>Дата, ?Период, """");"}
},
{0,
{"ПроверитьРавенствоДатСТочностью2Секунды",0,0,"пров","юТест.ПроверитьРавенствоДатСТочностью2Секунды(<?>Дата1, ?Дата2, """");"}
},
{0,
{"ПроверитьБольшеИлиРавно",0,0,"пров","юТест.ПроверитьБольше(<?>Больше, ?Меньше, """");"}
},
{0,
{"ПроверитьМеньше",0,0,"пров","юТест.ПроверитьМеньшеИлиРавно(<?>Меньше, ?Больше, """");"}
},
{0,
{"ПроверитьМеньшеИлиРавно",0,0,"пров","юТест.ПроверитьМеньшеИлиРавно(<?>Меньше, ?Больше, """");"}
},
{0,
{"ПроверитьВыполнилось",0,0,"пров","юТест.ПроверитьВыполнилось(""<?>СтрокаВыполнения"", ?ПараметрыИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьМетодВыполнился",0,0,"пров","юТест.ПроверитьМетодВыполнился(<?>Объект, ""ИмяМетода"", ?ПараметрыИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьНеВыполнилось",0,0,"пров","юТест.ПроверитьНеВыполнилось(""<?>СтрокаВыполнения"", ?ПараметрыИлиОжидаемоеОписаниеОшибки, ?ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьМетодНеВыполнился",0,0,"пров","юТест.ПроверитьМетодНеВыполнился(<?>Объект, ""ИмяМетода"", ?ПараметрыИлиОжидаемоеОписаниеОшибки, ?ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки, """");"}
},
{0,
{"ПроверитьНеЗаполненность",0,0,"пров","юТест.ПроверитьЗаполненность(<?>, """");"}
},
{0,
{"ПроверитьТип",0,0,"пров","юТест.ПроверитьТип(<?>, ?ТипИлиИмяТипа, """");"}
},
{0,
{"ПроверитьВхождение",0,0,"пров","юТест.ПроверитьВхождение(<?>, ?ПодстрокаПоиска, """");"}
},
{0,
{"ПроверитьВхождениеВКоллекцию",0,0,"пров","юТест.ПроверитьВхождениеВКоллекцию(<?>, ?Коллекция, """");"}
},
{0,
{"ПроверитьВалидностьЗапросаСКД",0,0,"пров","юТест.ПроверитьВалидностьЗапросаСКД(<?>, """");"}
},
{0,
{"ПроверитьНаличиеОбъектаИБ",0,0,"пров","юТест.ПроверитьНаличиеОбъектаИБ(<?>, """");"}
},
{0,
{"ПроверитьРавенствоФайлов",0,0,"пров","юТест.ПроверитьРавенствоФайлов(?ПутьФайла1, ?ПутьФайла2, ?ДопСообщениеОшибки = """", ?ПарамСравнениеФайлов = Неопределено, ?ПоказатьРазличия = Ложь);"}
}
}
},
{3,
{"Отчеты",1,0,"",""},
{0,
{"ПроверкаПериода",0,0,"","//Если НЕ ПроверитьПериод() Тогда
//	Возврат;
//КонецЕсли;

Функция ПроверитьПериод()
	Если Не ЗначениеЗаполнено(ВыбДата1) Тогда
		Сообщить(""Не выбрана дата начала периода"");
		Возврат Ложь;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ВыбДата2) Тогда
		Сообщить(""Не выбрана дата окончания периода"");
		Возврат Ложь;
	КонецЕсли; 
	Если ВыбДата1 > ВыбДата2 Тогда
		Сообщить(""Задан неверный период"");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
"}
},
{0,
{"Генерирование кнопочек для управления уровнями группировки в отчетах",0,0,"","//Программное генерирование кнопочек для удобного управления уровнями группировки в отчетах (версия 2).
//http://infostart.ru/public/83915/

//09.04.2011 23:57 [10.04.2011 16:28] mtv:) 29	 [+] [−]
//Алгоритм для 1С: Предприятие 8.1; 1С: Предприятие 8.2

//  В табличных документах 1С 8 имеется отличная возможность использования группировок. Но управление уровнями группировок через контекстное меню не очень удобное.
//  В свои отчетах, для управления уровнями группировок, я использую маленькие кнопочки на поле табличного документа. Это намного удобнее и быстрее, чем через контексное меню.
// 
//Кнопочки для управления уровнями группировок генерируются программно.
//Для этогов модуле формы, в самом конце процедуры формирования отчета нужно вызвать процедуру СгенерироватьКнопкиУправленияГруппировкой().
//В модуль формы нужно добавить две процедуры, где ""ПолеТабДок"" - это поле табличного документа, в которое выводится отчет:
Процедура СгенерироватьКнопкиУправленияГруппировкой()

    НачалоВерх = ЭлементыФормы.ПолеТабДок.Верх + 3; // Привязка к верхнему левому углу ПоляТабличногоДокумента
    НачалоЛево = ЭлементыФормы.ПолеТабДок.Лево + 3; // Привязка к верхнему левому углу ПоляТабличногоДокумента

    ШагКнопок      = 13;
    ПрефиксИмениКн = ""КнГр_"";

    // Удалить старые кнопки
    Сч = 0;
    Пока Сч < ЭлементыФормы.Количество() Цикл
        ТекЭлемент = ЭлементыФормы.Получить(Сч);
        Если Найти(ТекЭлемент.Имя, ПрефиксИмениКн) > 0 Тогда
            ЭлементыФормы.Удалить(ТекЭлемент);
        Иначе
            Сч = Сч + 1;
        КонецЕсли;
    КонецЦикла;

    // Добавть новые кнопки по количеству группировок
    КоличествоГруппировок = ЭлементыФормы.ПолеТабДок.КоличествоУровнейГруппировокСтрок();
    Для Сч = 1 По КоличествоГруппировок Цикл
        НоваяКнопка = ЭлементыФормы.Добавить(Тип(""Кнопка""), ПрефиксИмениКн + Сч);
        НоваяКнопка.Верх      = НачалоВерх;
        НоваяКнопка.Лево      = НачалоЛево + (ШагКнопок * (Сч - 1));
        НоваяКнопка.Высота    = 11;
        НоваяКнопка.Ширина    = 11;
        НоваяКнопка.Шрифт     = Новый Шрифт(""Шрифт диалогов и меню"", 6);
        НоваяКнопка.Заголовок = """" + Сч;
        НоваяКнопка.УстановитьДействие(""Нажатие"", Новый Действие(""СвернутьДоУровня""));
    КонецЦикла;

КонецПроцедуры //СгенерироватьКнопкиУправленияГруппировкой()

// Вызывется при нажатии кнопочек ""1"", ""2"" и т.д. (для сворачивания группировок)
Процедура СвернутьДоУровня(Элемент)

    Уровень = Число(Элемент.Заголовок); // здесь записан нужный уровень
    ЭлементыФормы.ПолеТабДок.ПоказатьУровеньГруппировокСтрок(Уровень - 1);

КонецПроцедуры //СвернутьДоУровня()"}
},
{0,
{"Табличный документ из разных макетов",0,0,"","// Производит соединение разных по форматированию табличных документов 
// ТДПриемник - табличный документ, в кот. устанавливается новый формат 
// Отчет - табличный документ, на основании кот. будет установлен новый формат 
// http://forum.mista.ru/topic.php?id=576103
// // довольно коряво получается - портретный и ландшафтный вариант очень плохо получаются :( Артур
Процедура ДобавитьОтчет(ТДПриемник, Отчет, ВыводитьРазделительСтраниц = Ложь) Экспорт

    Если ВыводитьРазделительСтраниц Тогда
        ТДПриемник.ВывестиГоризонтальныйРазделительСтраниц();
    КонецЕсли;    
    НачалоНовогоФорматаСтрок = ТДПриемник.ВысотаТаблицы + 1;
    ОбластьПрямоугольная = Отчет.Область(1, , Отчет.ВысотаТаблицы, );
    ТДПриемник.ВставитьОбласть(ОбластьПрямоугольная, ТДПриемник.Область(НачалоНовогоФорматаСтрок, 1));
    ТДПриемник.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + Отчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
    // назначим ширину колонок у новой области формата строк 
    Для Счетчик = 1 По Отчет.ШиринаТаблицы Цикл
        ТДПриемник.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = Отчет.Область(1, Счетчик, 1, Счетчик).ШиринаКолонки;
    КонецЦикла;

КонецПроцедуры // ДобавитьОтчет"}
}
},
{10,
{"Шаблоны модулей",1,0,"",""},
{5,
{"Документы",1,0,"",""},
{0,
{"Модуль документа",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(""Документ можно распечатать только после его записи"");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип(""ДвоичныеДанные"") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	ТабДокумент = Неопределено;
	
	//Если ИмяМакета = ""Печать"" Тогда
	//	// Получить экземпляр документа на печать
	//	//ТабДокумент = ПечатьВозвратаОтПокупателя();		
	//КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);		
		//ниже код из БП 2.0
		//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура(); //""Печать"",""Печать"");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
"}
},
{0,
{"Модуль формы документа",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА УПРАВЛЕНИЯ ВИДИМОСТЬЮ, ДОСТУПНОСТЬЮ И ТОЛЬКО ПРОСМОТР


// Процедура устанавливает подменю ""Заполнить"" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие(""НажатиеНаДополнительнуюКнопкуЗаполненияТЧ""));
	
КонецПроцедуры

// Процедура устанавливает подменю ""Печать"" и кнопку ""Печать по умолчанию"" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие(""ОсновныеДействияФормыПечать""), Новый Действие(""ОсновныеДействияФормыУстановитьПечатьПоУмолчанию""));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие(""ОсновныеДействияФормыПечатьПоУмолчанию""));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// видимость, устанавливается соответствующее значение видимости
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их видимости
Функция ПолучитьСписокУправлениеВидимостью()
	
	СписокУправлениеВидимостью = Новый СписокЗначений;

	//СписокУправлениеВидимостью.Добавить(ПоказыватьВДокументахСчетаУчета, ""ОсновнаяПанель.Страницы.СчетаУчета"");

	Возврат СписокУправлениеВидимостью;
КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для колонок табличных полей формы,
// имеющих нестандартную настройку возможности пользователем изменять
// видимость, устанавливается соответствующее значение этой возможности
//
// Возвращаемое значение: список со списками с именами колонок табличных
// полей формы и текущим значением их возможности изменять видимость
Функция ПолучитьСписокДоступаКУправлениюВидимостью()
	
	СписокДоступкаКУправлениюВидимостью = Новый СписокЗначений;
	Возврат СписокДоступкаКУправлениюВидимостью;	
КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// доступность, устанавливается соответствующее значение доступности
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их доступности
Функция ПолучитьСписокУправлениеДоступностью()
	
	СписокУправлениеДоступностью = Новый СписокЗначений;
	//СписокУправлениеДоступностью.Добавить(ДоступныПараметрыНДС И ОтразитьВКнигеПокупок, ""СчетУчетаНДС"");
	
	Возврат СписокУправлениеДоступностью;
	
КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// свойство ""только просмотр"", устанавливается соответствующее значение 
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их свойства ""только просмотр""
Функция ПолучитьСписокУправлениеТолькоПросмотр()
	
	СписокУправлениеТолькоПросмотр = Новый СписокЗначений;
	
	Возврат СписокУправлениеТолькоПросмотр;
	
КонецФункции

// Централизоаннно осуществляется управление доступом к элементам формы:
//  - видимостью
//  - доступностью
//  - только просмотром
//  - возможностью изменять видимость (только для колонок табличных полей)
//
Процедура УстановитьДоступ()

	// устанавливаем видимость
	СписокУправлениеВидимостью = ПолучитьСписокУправлениеВидимостью();
	
	Если СписокУправлениеВидимостью <> Неопределено Тогда
		Для каждого ЭлементУправлениеВидимостью из СписокУправлениеВидимостью Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеВидимостью.Представление;
			ВидимостьЭлементаФормы = ЭлементУправлениеВидимостью.Значение;
			
			Если ТипЗнч(ВидимостьЭлементаФормы) = Тип(""Булево"") Тогда
				
				ПозицияСтраниц = Найти(ИмяЭлементаФормы, "".Страницы."");
				
				Если ПозицияСтраниц > 0 Тогда
					ЭлементФормы = ЭлементыФормы[Лев(ИмяЭлементаФормы, ПозицияСтраниц -1)];
					СтраницаЭлементаФормы = ЭлементФормы.Страницы[Сред(ИмяЭлементаФормы, ПозицияСтраниц + 10)];
					Если СтраницаЭлементаФормы.Видимость <> ВидимостьЭлементаФормы Тогда
						СтраницаЭлементаФормы.Видимость = ВидимостьЭлементаФормы;
					КонецЕсли;
					
				Иначе
					ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
					Если ЭлементФормы.Видимость <> ВидимостьЭлементаФормы Тогда
						ЭлементФормы.Видимость = ВидимостьЭлементаФормы;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ВидимостьЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементВидимостиКолонки из ВидимостьЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементВидимостиКолонки.Представление];
					Если КолонкаТабличногоПоля.Видимость <> ЭлементВидимостиКолонки.Значение Тогда
						КолонкаТабличногоПоля.Видимость = ЭлементВидимостиКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// устанавливаем доступность
	СписокУправлениеДоступностью = ПолучитьСписокУправлениеДоступностью();
	
	Если СписокУправлениеДоступностью <> Неопределено Тогда
		Для каждого ЭлементУправлениеДоступностью из СписокУправлениеДоступностью Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеДоступностью.Представление;
			ДоступностьЭлементаФормы = ЭлементУправлениеДоступностью.Значение;
			
			Если ТипЗнч(ДоступностьЭлементаФормы) = Тип(""Булево"") Тогда
				
				ПозицияСтраниц = Найти(ИмяЭлементаФормы, "".Страницы."");
				
				Если ПозицияСтраниц > 0 Тогда
					ЭлементФормы = ЭлементыФормы[Лев(ИмяЭлементаФормы, ПозицияСтраниц -1)];
					СтраницаЭлементаФормы = ЭлементФормы.Страницы[Сред(ИмяЭлементаФормы, ПозицияСтраниц + 10)];
					Если СтраницаЭлементаФормы.Доступность <> ДоступностьЭлементаФормы Тогда
						СтраницаЭлементаФормы.Доступность = ДоступностьЭлементаФормы;
					КонецЕсли;
					
				Иначе
					ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
					Если ЭлементФормы.Доступность <> ДоступностьЭлементаФормы Тогда
						ЭлементФормы.Доступность = ДоступностьЭлементаФормы;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ДоступностьЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементДоступностиКолонки из ДоступностьЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементДоступностиКолонки.Представление];
					Если КолонкаТабличногоПоля.Доступность <> ЭлементДоступностиКолонки.Значение Тогда
						КолонкаТабличногоПоля.Доступность = ЭлементДоступностиКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//устанавливаем только просмотр
	СписокУправлениеТолькоПросмотр = ПолучитьСписокУправлениеТолькоПросмотр();
	
	Если СписокУправлениеТолькоПросмотр <> Неопределено Тогда
		Для каждого ЭлементУправлениеТолькоПросмотр из СписокУправлениеТолькоПросмотр Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеТолькоПросмотр.Представление;
			ТолькоПросмотрЭлементаФормы = ЭлементУправлениеТолькоПросмотр.Значение;
			
			Если ТипЗнч(ТолькоПросмотрЭлементаФормы) = Тип(""Булево"") Тогда
				
				ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
				Если ЭлементФормы.ТолькоПросмотр <> ТолькоПросмотрЭлементаФормы Тогда
					ЭлементФормы.ТолькоПросмотр = ТолькоПросмотрЭлементаФормы;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТолькоПросмотрЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементТолькоПросмотрКолонки из ТолькоПросмотрЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементТолькоПросмотрКолонки.Представление];
					Если КолонкаТабличногоПоля.ТолькоПросмотр <> ЭлементТолькоПросмотрКолонки.Значение Тогда
						КолонкаТабличногоПоля.ТолькоПросмотр = ЭлементТолькоПросмотрКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	
	// устанавливаем доступ к управлению видимостью
	СписокДоступаКУправлениюВидимостью = ПолучитьСписокДоступаКУправлениюВидимостью();

	Если СписокДоступаКУправлениюВидимостью <> Неопределено Тогда
		Для каждого ЭлементДоступаКУправлениюВидимостью из СписокДоступаКУправлениюВидимостью Цикл
			
			ИмяЭлементаФормы = ЭлементДоступаКУправлениюВидимостью.Представление;
			ДоступКУправлениюВидимостьюЭлементаФормы = ЭлементДоступаКУправлениюВидимостью.Значение;
			
			Если ТипЗнч(ДоступКУправлениюВидимостьюЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементДоступаКУправлениюВидимостьюКолонки из ДоступКУправлениюВидимостьюЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементДоступаКУправлениюВидимостьюКолонки.Представление];
					Если КолонкаТабличногоПоля.ИзменятьВидимость <> ЭлементДоступаКУправлениюВидимостьюКолонки.Значение Тогда
						КолонкаТабличногоПоля.ИзменятьВидимость = ЭлементДоступаКУправлениюВидимостьюКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает автоотметку незаполненного для тех реквизитов
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	//ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Истина;

КонецПроцедуры // УстановитьАвтоотметку()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	
	//Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
	//	ЭлементыФормы.НадписьВсего.Заголовок = ""Всего (<>):"";
	//Иначе
	//	ЭлементыФормы.НадписьВсего.Заголовок = ""Всего ("" + СокрЛП(ДокументОбъект.ВалютаДокумента) +""):"";
	//КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ""ПередОткрытием"" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		//РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// ========================  ========================  ========================  
	// блок универсального кода
	//
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	  	
	// Установка подменю ""Советы"".
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.ДействияФормы);
	//
	// завершение блока универсального кода
	// ========================  ========================  ========================  

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события ""ПриОткрытии"" формы
//
Процедура ПриОткрытии()
	// ========================  ========================  ========================  
	// блок универсального кода
	//

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""), , ""Продажа"",ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		КонецЕсли;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ПоказыватьДвиженияПриПроведении"");

	// Проверка ведения однофирменности
	//ЭлементыФормы.Организация.ТолькоПросмотр = НЕ глЗначениеПеременной(""УчетПоВсемОрганизациям"");

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьДоступ();
	
	// Установить автоотметку незаполненного
	УстановитьАвтоотметку();
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура(""Дата,Организация"");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	//
	// завершение блока универсального кода
	// ========================  ========================  ========================  
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ""ОбновлениеОтображения"" формы.
//
Процедура ОбновлениеОтображения()

	// ========================  ========================  ========================  
	// блок универсального кода
	//
	
	ОбновитьПодвал();
	
	// Подсчитаем количество строк в табличных частях.
	//СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	//СтраницаПанели.Зачет.Заголовок = ""Зачет ("" + ДокументОбъект.тч.Количество() + "" поз.)"";
	
	//
	// завершение блока универсального кода
	// ========================  ========================  ========================  

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события ""ПослеЗаписи"" формы.
//
Процедура ПослеЗаписи()

	// ========================  ========================  ========================  
	// блок универсального кода
	//
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	//ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	//
	// завершение блока универсального кода
	// ========================  ========================  ========================  
	
КонецПроцедуры // ПослеЗаписи()

Процедура ПриЗакрытии()
	// ========================  ========================  ========================  
	// блок универсального кода
	//
	
	//УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ПоказыватьВДокументахСчетаУчета"", ПоказыватьВДокументахСчетаУчета);	
	//
	// завершение блока универсального кода
	// ========================  ========================  ========================  
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события ""ПриИзменении"" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	// ========================  ========================  ========================  
	// блок универсального кода
	//

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	//РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		УстановитьДоступ();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьДоступ();
	//
	// завершение блока универсального кода
	// ========================  ========================  ========================  

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,""Имя"",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Печать по умолчанию""
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Печать""
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Установить печать по умолчанию""
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
                   
// Процедура вызывается принажатии кнопки в подменю ""Советы"" командной панели
// формы.
//
Процедура ДействияФормыОткрытьСоветы(Кнопка)
	
	РаботаСДиалогами.ОткрытьСоветы(Кнопка);
	
КонецПроцедуры //ДействияФормыОткрытьСоветы()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры
"}
},
{0,
{"Модуль формы документа с ТЧ",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущую форму подбора номенклатуры
Перем мФормаПодбораНоменклатуры; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА УПРАВЛЕНИЯ ВИДИМОСТЬЮ, ДОСТУПНОСТЬЮ И ТОЛЬКО ПРОСМОТР


// Процедура устанавливает подменю ""Заполнить"" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	//СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие(""НажатиеНаДополнительнуюКнопкуЗаполненияТЧ""));
	
КонецПроцедуры

// Процедура устанавливает подменю ""Печать"" и кнопку ""Печать по умолчанию"" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие(""ОсновныеДействияФормыПечать""), Новый Действие(""ОсновныеДействияФормыУстановитьПечатьПоУмолчанию""));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие(""ОсновныеДействияФормыПечатьПоУмолчанию""));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// видимость, устанавливается соответствующее значение видимости
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их видимости
Функция ПолучитьСписокУправлениеВидимостью()
	
	СписокУправлениеВидимостью = Новый СписокЗначений;

	СписокКолонокТовары = Новый СписокЗначений;
	
	
	//ВидимостьСчетов = НЕ ЭтоКомиссия;
	
	//СписокКолонокТовары.Добавить(НЕ ЭтоКомиссия, ""Цена"");
	//СписокКолонокТовары.Добавить(НЕ ЭтоКомиссия, ""Сумма"");
	//СписокКолонокТовары.Добавить(УчитыватьНДС И (НЕ ЭтоКомиссия), ""СтавкаНДС"");
	//СписокКолонокТовары.Добавить(УчитыватьНДС И (НЕ ЭтоКомиссия), ""СуммаНДС"");
	//СписокКолонокТовары.Добавить(НЕ ЭтоКомиссия, ""Всего"");
	
	//СписокУправлениеВидимостью.Добавить(СписокКолонокТовары, ""Товары"");

	//СписокУправлениеВидимостью.Добавить(ПоказыватьВДокументахСчетаУчета, ""ОсновнаяПанель.Страницы.СчетаУчета"");

	Возврат СписокУправлениеВидимостью;

КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для колонок табличных полей формы,
// имеющих нестандартную настройку возможности пользователем изменять
// видимость, устанавливается соответствующее значение этой возможности
//
// Возвращаемое значение: список со списками с именами колонок табличных
// полей формы и текущим значением их возможности изменять видимость
Функция ПолучитьСписокДоступаКУправлениюВидимостью()
	
	СписокДоступкаКУправлениюВидимостью = Новый СписокЗначений;
	
	//СписокКолонокТовары = Новый СписокЗначений;
	//
	//// Установить колонки, видимостью которых пользователь управлять не может.
	//СписокКолонокТовары.Добавить(Ложь, ""Номенклатура"");
	//СписокКолонокТовары.Добавить(Ложь, ""Количество"");
	//СписокКолонокТовары.Добавить(Ложь, ""Сумма"");
	//СписокКолонокТовары.Добавить(Ложь, ""СтавкаНДС"");
	//СписокКолонокТовары.Добавить(Ложь, ""СуммаНДС"");
	//
	//СписокДоступкаКУправлениюВидимостью.Добавить(СписокКолонокТовары, ""Товары"");
	//
	//СписокКолонокВозвТара = Новый СписокЗначений;
	//
	//СписокКолонокВозвТара.Добавить(Ложь, ""Номенклатура"");
	//СписокКолонокВозвТара.Добавить(Ложь, ""Количество"");
	//СписокКолонокВозвТара.Добавить(Ложь, ""Сумма"");
	//
	//СписокДоступкаКУправлениюВидимостью.Добавить(СписокКолонокВозвТара, ""ВозвратнаяТара"");
	
	Возврат СписокДоступкаКУправлениюВидимостью;
	
КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// доступность, устанавливается соответствующее значение доступности
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их доступности
Функция ПолучитьСписокУправлениеДоступностью()
	
	СписокУправлениеДоступностью = Новый СписокЗначений;
	//СписокУправлениеДоступностью.Добавить(ДоступныПараметрыНДС И ОтразитьВКнигеПокупок, ""СчетУчетаНДС"");
	
	Возврат СписокУправлениеДоступностью;
	
КонецФункции

// В соответствии с текущими значениями реквизитов объекта и формы,
// а также переменных модуля формы для списка элементов формы, изменяющих
// свойство ""только просмотр"", устанавливается соответствующее значение 
//
// Возвращаемое значение: список с именами элементов формы и текущим 
// значением их свойства ""только просмотр""
Функция ПолучитьСписокУправлениеТолькоПросмотр()
	
	СписокУправлениеТолькоПросмотр = Новый СписокЗначений;
	
	Возврат СписокУправлениеТолькоПросмотр;
	
КонецФункции

// Централизоаннно осуществляется управление доступом к элементам формы:
//  - видимостью
//  - доступностью
//  - только просмотром
//  - возможностью изменять видимость (только для колонок табличных полей)
//
Процедура УстановитьДоступ()

	// устанавливаем видимость
	СписокУправлениеВидимостью = ПолучитьСписокУправлениеВидимостью();
	
	Если СписокУправлениеВидимостью <> Неопределено Тогда
		Для каждого ЭлементУправлениеВидимостью из СписокУправлениеВидимостью Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеВидимостью.Представление;
			ВидимостьЭлементаФормы = ЭлементУправлениеВидимостью.Значение;
			
			Если ТипЗнч(ВидимостьЭлементаФормы) = Тип(""Булево"") Тогда
				
				ПозицияСтраниц = Найти(ИмяЭлементаФормы, "".Страницы."");
				
				Если ПозицияСтраниц > 0 Тогда
					ЭлементФормы = ЭлементыФормы[Лев(ИмяЭлементаФормы, ПозицияСтраниц -1)];
					СтраницаЭлементаФормы = ЭлементФормы.Страницы[Сред(ИмяЭлементаФормы, ПозицияСтраниц + 10)];
					Если СтраницаЭлементаФормы.Видимость <> ВидимостьЭлементаФормы Тогда
						СтраницаЭлементаФормы.Видимость = ВидимостьЭлементаФормы;
					КонецЕсли;
					
				Иначе
					ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
					Если ЭлементФормы.Видимость <> ВидимостьЭлементаФормы Тогда
						ЭлементФормы.Видимость = ВидимостьЭлементаФормы;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ВидимостьЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементВидимостиКолонки из ВидимостьЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементВидимостиКолонки.Представление];
					Если КолонкаТабличногоПоля.Видимость <> ЭлементВидимостиКолонки.Значение Тогда
						КолонкаТабличногоПоля.Видимость = ЭлементВидимостиКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// устанавливаем доступность
	СписокУправлениеДоступностью = ПолучитьСписокУправлениеДоступностью();
	
	Если СписокУправлениеДоступностью <> Неопределено Тогда
		Для каждого ЭлементУправлениеДоступностью из СписокУправлениеДоступностью Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеДоступностью.Представление;
			ДоступностьЭлементаФормы = ЭлементУправлениеДоступностью.Значение;
			
			Если ТипЗнч(ДоступностьЭлементаФормы) = Тип(""Булево"") Тогда
				
				ПозицияСтраниц = Найти(ИмяЭлементаФормы, "".Страницы."");
				
				Если ПозицияСтраниц > 0 Тогда
					ЭлементФормы = ЭлементыФормы[Лев(ИмяЭлементаФормы, ПозицияСтраниц -1)];
					СтраницаЭлементаФормы = ЭлементФормы.Страницы[Сред(ИмяЭлементаФормы, ПозицияСтраниц + 10)];
					Если СтраницаЭлементаФормы.Доступность <> ДоступностьЭлементаФормы Тогда
						СтраницаЭлементаФормы.Доступность = ДоступностьЭлементаФормы;
					КонецЕсли;
					
				Иначе
					ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
					Если ЭлементФормы.Доступность <> ДоступностьЭлементаФормы Тогда
						ЭлементФормы.Доступность = ДоступностьЭлементаФормы;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ДоступностьЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементДоступностиКолонки из ДоступностьЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементДоступностиКолонки.Представление];
					Если КолонкаТабличногоПоля.Доступность <> ЭлементДоступностиКолонки.Значение Тогда
						КолонкаТабличногоПоля.Доступность = ЭлементДоступностиКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//устанавливаем только просмотр
	СписокУправлениеТолькоПросмотр = ПолучитьСписокУправлениеТолькоПросмотр();
	
	Если СписокУправлениеТолькоПросмотр <> Неопределено Тогда
		Для каждого ЭлементУправлениеТолькоПросмотр из СписокУправлениеТолькоПросмотр Цикл
			
			ИмяЭлементаФормы = ЭлементУправлениеТолькоПросмотр.Представление;
			ТолькоПросмотрЭлементаФормы = ЭлементУправлениеТолькоПросмотр.Значение;
			
			Если ТипЗнч(ТолькоПросмотрЭлементаФормы) = Тип(""Булево"") Тогда
				
				ЭлементФормы = ЭлементыФормы[ИмяЭлементаФормы];
				Если ЭлементФормы.ТолькоПросмотр <> ТолькоПросмотрЭлементаФормы Тогда
					ЭлементФормы.ТолькоПросмотр = ТолькоПросмотрЭлементаФормы;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТолькоПросмотрЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементТолькоПросмотрКолонки из ТолькоПросмотрЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементТолькоПросмотрКолонки.Представление];
					Если КолонкаТабличногоПоля.ТолькоПросмотр <> ЭлементТолькоПросмотрКолонки.Значение Тогда
						КолонкаТабличногоПоля.ТолькоПросмотр = ЭлементТолькоПросмотрКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	
	// устанавливаем доступ к управлению видимостью
	СписокДоступаКУправлениюВидимостью = ПолучитьСписокДоступаКУправлениюВидимостью();

	Если СписокДоступаКУправлениюВидимостью <> Неопределено Тогда
		Для каждого ЭлементДоступаКУправлениюВидимостью из СписокДоступаКУправлениюВидимостью Цикл
			
			ИмяЭлементаФормы = ЭлементДоступаКУправлениюВидимостью.Представление;
			ДоступКУправлениюВидимостьюЭлементаФормы = ЭлементДоступаКУправлениюВидимостью.Значение;
			
			Если ТипЗнч(ДоступКУправлениюВидимостьюЭлементаФормы) = Тип(""СписокЗначений"") Тогда
				
				КоллекцияКолонок = ЭлементыФормы[ИмяЭлементаФормы].Колонки;
			
				Для каждого ЭлементДоступаКУправлениюВидимостьюКолонки из ДоступКУправлениюВидимостьюЭлементаФормы Цикл
					КолонкаТабличногоПоля = КоллекцияКолонок[ЭлементДоступаКУправлениюВидимостьюКолонки.Представление];
					Если КолонкаТабличногоПоля.ИзменятьВидимость <> ЭлементДоступаКУправлениюВидимостьюКолонки.Значение Тогда
						КолонкаТабличногоПоля.ИзменятьВидимость = ЭлементДоступаКУправлениюВидимостьюКолонки.Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, мФормаПодбораНоменклатуры, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для
// подбора номеклатуры в табличную часть.
//
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)
КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт
КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	//ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти);

	//// Заполняем реквизиты табличной части.
	//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект); 
	//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// ""Товары"", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	//ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);

КонецПроцедуры // УстановитьАвтоотметку()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	//ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, ""Товары""));

	//ВременнаяСтрока = """";
	//ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	//Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
	//	ЭлементыФормы.НадписьВсего.Заголовок = ""Всего (<>):"";
	//Иначе
	//	ЭлементыФормы.НадписьВсего.Заголовок = ""Всего ("" + СокрЛП(ДокументОбъект.ВалютаДокумента) +""):"";
	//КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ""ПередОткрытием"" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		//РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	  	
	// Установка подменю ""Советы"".
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.ДействияФормы);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события ""ПриОткрытии"" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""), , ""Продажа"",ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		КонецЕсли;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	ОткрыватьНастройкуДвижений = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ПоказыватьДвиженияПриПроведении"");

	// Проверка ведения однофирменности
	//ЭлементыФормы.Организация.ТолькоПросмотр = НЕ глЗначениеПеременной(""УчетПоВсемОрганизациям"");

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьДоступ();
	
	// Установить автоотметку незаполненного
	УстановитьАвтоотметку();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить(""Товары"",	""Товары""); // ключ - имя страницы, значение - имя табличной части
	//Страницы.Добавить(""Тара"",	""ВозвратнаяТара"");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура(""Дата,Организация"");
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,СтруктураРеквизитов,ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница,Страницы);
	
	// Установить доступность формы с учетом даты запрета редактирования	
	РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ""ОбновлениеОтображения"" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	// Подсчитаем количество строк в табличных частях.
	//СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	//СтраницаПанели.Зачет.Заголовок = ""Зачет ("" + ДокументОбъект.тч.Количество() + "" поз.)"";
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события ""ОбработкаВыбора"" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип(""Структура"") Тогда
		ЗначениеВыбора.Свойство(""Команда"", Команда);

		Если Команда = ""ПодборВТабличнуюЧастьТовары"" Тогда
			//ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события ""ПослеЗаписи"" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	//Открыть настройку движений
	//ОбщегоНазначения.РучнаяКорректировкаОсновнаяФормаПослеЗаписи(ЭтотОбъект.Проведен,ОткрыватьНастройкуДвижений,Ссылка,ЭтотОбъект);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ПриЗакрытии()
	//УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ПоказыватьВДокументахСчетаУчета"", ПоказыватьВДокументахСчетаУчета);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки ""Подбор"" командной панели
// табличного поля ""Товары"", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть ""Товары"".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	//ДействиеПодбор(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки ""Изменить"" командной панели
// табличного поля ""Товары"", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части ""Товары"".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;

	//Перенесем табличную часть
	//ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события ""ПриИзменении"" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	//РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		УстановитьДоступ();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьДоступ();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ""ПриИзменении"" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, ""Номер"", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""));
	
	УстановитьДоступ();
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события ""ПриВыводеСтроки"" табличной части
// ""Товары"". Формирует данные в колонке ""Всего"", ""ЕдиницаХранения""
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	//Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
	//	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	//	ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
	//										+ ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	//КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события ""ПриИзменении"" поля ввода номенклатуры
// в строке табличной части ""Товары"".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	//СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//// Выполнить общие действия для всех документов при изменении номенклатуры.
	//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ""Товары"", Истина, ОтражатьВНалоговомУчете);
	//ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//// Рассчитываем реквизиты табличной части.
	//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//
	//ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события ""ПриИзменении"" поля ввода цены
// в строке табличной части ""Товары"".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	//СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//// Рассчитать реквизиты табличной части.
	//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события ""ПриИзменении"" поля ввода количества
// в строке табличной части ""Товары"".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	//// Рассчитать реквизиты табличной части.
	//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события ""ПриИзменении"" поля ввода ставки НДС
// в строке табличной части ""Товары"".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события ""ПриИзменении"" поля ввода суммы
// в строке табличной части ""Товары"".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	//ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события ""ПриАктивизацииСтроки"" в табличной части ""Товары"".
//
Процедура ТоварыПриАктивизацииСтроки(Элемент)

	//Если ЭлементыФормы.Товары.ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;

	//СчетБУ  = ЭлементыФормы.Товары.ТекущиеДанные.СчетДоходовБУ;
	//СчетНУ  = ЭлементыФормы.Товары.ТекущиеДанные.СчетДоходовНУ;

	//ЭлементыФормы.Товары.Колонки.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	//ЭлементыФормы.Товары.Колонки.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,""Имя"",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Печать по умолчанию""
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Печать""
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Установить печать по умолчанию""
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры
                   
// Процедура вызывается принажатии кнопки в подменю ""Советы"" командной панели
// формы.
//
Процедура ДействияФормыОткрытьСоветы(Кнопка)
	
	РаботаСДиалогами.ОткрытьСоветы(Кнопка);
	
КонецПроцедуры //ДействияФормыОткрытьСоветы()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры
"}
},
{0,
{"Модуль формы списка документов",0,0,"","
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки ""Печать"" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		 Возврат;
    КонецЕсли;
	
    УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка)

КонецПроцедуры
                             
// Процедура вызывается принажатии кнопки в подменю ""Советы"" командной панели
// формы.
//
Процедура ДействияФормыОткрытьСоветы(Кнопка)
	
	РаботаСДиалогами.ОткрытьСоветы(Кнопка);
	
КонецПроцедуры //ДействияФормыОткрытьСоветы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ""ПередОткрытием"" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	// Установка подменю ""Советы"".
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.ДействияФормы);

КонецПроцедуры

// Обработчик события ""ПриОткрытии"" формы.
//
Процедура ПриОткрытии()

	// Проверка однофирменности
	РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма, глЗначениеПеременной(""УчетПоВсемОрганизациям""), глЗначениеПеременной(""ОсновнаяОрганизация""), ""ДокументСписок"");

КонецПроцедуры // ПриОткрытии()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		 Возврат;
    КонецЕсли;

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()
"}
},
{0,
{"Установка отбора на форме ( флажок + вид сравнения + элемент/список )",0,0,"","// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеВидаСравнения<?""Введите имя элемента отбора"">ПриИзменении(Элемент)
	
	Если ТипЗнч(<?""Введите имя элемента отбора"">) = Тип(""СправочникСсылка.<?""Введите имя справочника для элемента отбора"", Справочник>"") Тогда
		ЗаписываемоеЗначение = <?""Введите имя элемента отбора"">;                                                               
	Иначе
		Если <?""Введите имя элемента отбора"">.Количество() = 0 Тогда    
			ЗаписываемоеЗначение = ОбщегоНазначения.ПустоеЗначениеТипа(""СправочникСсылка.<?""Введите имя справочника для элемента отбора"", Справочник>"")
		Иначе
			ЗаписываемоеЗначение = <?""Введите имя элемента отбора"">[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.Значение = ВидСравнения.ВСписке ИЛИ Элемент.Значение = ВидСравнения.НеВСписке 
		Или Элемент.Значение = ВидСравнения.ВСпискеПоИерархии ИЛИ Элемент.Значение = ВидСравнения.НеВСпискеПоИерархии  Тогда
		
		ЭлементыФормы.ПолеНастройки<?""Введите имя элемента отбора"">.ОграничениеТипа	  = Новый ОписаниеТипов(""СписокЗначений"");
        <?""Введите имя элемента отбора""> = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			<?""Введите имя элемента отбора"">.Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		ЭлементыФормы.ПолеНастройки<?""Введите имя элемента отбора"">.ОграничениеТипа = Новый ОписаниеТипов(""СправочникСсылка.<?""Введите имя справочника для элемента отбора"", Справочник>"");
		<?""Введите имя элемента отбора""> = ЗаписываемоеЗначение;
		
	КонецЕсли; 
	
	//ОбновитьЗаголовокОкна();	
КонецПроцедуры

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройки<?""Введите имя элемента отбора"">ПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип(""СправочникСсылка.<?""Введите имя справочника для элемента отбора"", Справочник>"") Тогда
	
		Если Элемент.Значение.Пустая() Тогда
			ЭлементыФормы.ФлажокНастройки<?""Введите имя элемента отбора"">.Значение = Ложь
		Иначе
			ЭлементыФормы.ФлажокНастройки<?""Введите имя элемента отбора"">.Значение = Истина;
			Если Элемент.Значение.ЭтоГруппа Тогда
				ВидСравнения<?""Введите имя элемента отбора"">     = ВидСравнения.ВИерархии;
			Иначе
				ВидСравнения<?""Введите имя элемента отбора"">     = ВидСравнения.Равно;
			КонецЕсли; 
		КонецЕсли; 
		
	Иначе // Список значений
	
		Если Элемент.Значение.Количество() = 0 Тогда
			ЭлементыФормы.ФлажокНастройки<?""Введите имя элемента отбора"">.Значение = Ложь
		Иначе
			ЭлементыФормы.ФлажокНастройки<?""Введите имя элемента отбора"">.Значение = Истина;
			ВидСравнения<?""Введите имя элемента отбора"">     = ВидСравнения.ВСпискеПоИерархии;
		КонецЕсли;
	
	КонецЕсли; 
	
	//ОбновитьЗаголовокОкна();	
КонецПроцедуры

Процедура Отбор_ПроверитьКорректностьЭлементовОбработки_<?""Введите имя элемента отбора"">()
	мдРеквизиты = Метаданные().Реквизиты; //Метаданные.Обработки.ЗаполнитьОбразы.Реквизиты;
	
	артТесты.ПроверитьНеравенство(мдРеквизиты.Найти(""<?""Введите имя элемента отбора"">""), Неопределено, ""мдРеквизиты.<?""Введите имя элемента отбора"">"");
	артТесты.ПроверитьНеравенство(мдРеквизиты.Найти(""ВидСравнения<?""Введите имя элемента отбора"">""), Неопределено, ""мдРеквизиты.ВидСравнения<?""Введите имя элемента отбора"">"");
	артТесты.ПроверитьНеравенство(мдРеквизиты.Найти(""Отбор<?""Введите имя элемента отбора"">""), Неопределено, ""мдРеквизиты.Отбор<?""Введите имя элемента отбора"">"");
	
	эуПолеВидаСравнения<?""Введите имя элемента отбора""> = ЭлементыФормы.Найти(""ПолеВидаСравнения<?""Введите имя элемента отбора"">"");
	артТесты.ПроверитьНеравенство(эуПолеВидаСравнения<?""Введите имя элемента отбора"">, Неопределено, ""ЭлементыФормы.ПолеВидаСравнения<?""Введите имя элемента отбора"">"");		
	артТесты.ПроверитьРавенство(эуПолеВидаСравнения<?""Введите имя элемента отбора"">.Данные, ""ВидСравнения<?""Введите имя элемента отбора"">"", ""эуПолеВидаСравнения<?""Введите имя элемента отбора"">.Данные"");
	
	эуФлажокНастройки<?""Введите имя элемента отбора""> = ЭлементыФормы.Найти(""ФлажокНастройки<?""Введите имя элемента отбора"">"");
	артТесты.ПроверитьНеравенство(эуФлажокНастройки<?""Введите имя элемента отбора"">, Неопределено, ""ЭлементыФормы.ФлажокНастройки<?""Введите имя элемента отбора"">"");		
	артТесты.ПроверитьРавенство(эуФлажокНастройки<?""Введите имя элемента отбора"">.Данные, ""Отбор<?""Введите имя элемента отбора"">"", ""эуФлажокНастройки<?""Введите имя элемента отбора"">.Данные"");
	
	эуПолеНастройки<?""Введите имя элемента отбора""> = ЭлементыФормы.Найти(""ПолеНастройки<?""Введите имя элемента отбора"">"");
	//эуПолеНастройки<?""Введите имя элемента отбора""> = ЭлементыФормы.ПолеНастройки<?""Введите имя элемента отбора"">.Данные;
	артТесты.ПроверитьНеравенство(эуПолеНастройки<?""Введите имя элемента отбора"">, Неопределено, ""ЭлементыФормы.ПолеНастройки<?""Введите имя элемента отбора"">"");		
	артТесты.ПроверитьИстину(эуПолеНастройки<?""Введите имя элемента отбора"">.ТипЗначенияСписка.СодержитТип(Тип(""СправочникСсылка.<?""Введите имя справочника для элемента отбора"", Справочник>"")), ""эуПолеНастройки<?""Введите имя элемента отбора"">.ТипЗначенияСписка"");
	артТесты.ПроверитьРавенство(эуПолеНастройки<?""Введите имя элемента отбора"">.Данные, ""<?""Введите имя элемента отбора"">"", ""эуПолеНастройки<?""Введите имя элемента отбора"">.Данные"");
КонецПроцедуры

Процедура ПередОткрытием_УстановитьПараметрыОтбора_<?""Введите имя элемента отбора"">(Отказ, СтандартнаяОбработка)
	Отбор_ПроверитьКорректностьЭлементовОбработки_<?""Введите имя элемента отбора"">();
	
	Если ЭлементыФормы.ПолеВидаСравнения<?""Введите имя элемента отбора"">.СписокВыбора.Количество() = 0 Тогда
		ЭлементыФормы.ПолеВидаСравнения<?""Введите имя элемента отбора"">.СписокВыбора = УправлениеОтчетами.ПолучитьСписокВидовСравненияПоТипу(Новый ОписаниеТипов(""СправочникСсылка.<?""Введите имя справочника для элемента отбора"", Справочник>""));
		ВидСравнения<?""Введите имя элемента отбора""> = ВидСравнения.Равно;
		<?""Введите имя элемента отбора""> = ОбщегоНазначения.ПустоеЗначениеТипа(""СправочникСсылка.<?""Введите имя справочника для элемента отбора"", Справочник>"");
	КонецЕсли; 
	
	лДействие = Новый Действие(""ПолеВидаСравнения<?""Введите имя элемента отбора"">ПриИзменении"");
	ЭлементыФормы.ПолеВидаСравнения<?""Введите имя элемента отбора"">.УстановитьДействие(""ПриИзменении"", лДействие); 
	
	лДействие = Новый Действие(""ПолеНастройки<?""Введите имя элемента отбора"">ПриИзменении"");
	ЭлементыФормы.ПолеНастройки<?""Введите имя элемента отбора"">.УстановитьДействие(""ПриИзменении"", лДействие); 
КонецПроцедуры

// код из этой процедуры перенести в штатную обработку ПередОткрытием
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ПередОткрытием_УстановитьПараметрыОтбора_<?""Введите имя элемента отбора"">(Отказ, СтандартнаяОбработка);
КонецПроцедуры
 "}
}
},
{2,
{"Печатные формы",1,0,"",""},
{0,
{"Код для штатной печати документа",0,0,"","// макет Параметры_Авторегистрации - первая колонка Документы.РасходныйКассовыйОрдер

Перем	_тестируемПечатнуюФорму; //для прямого тестирования печатной формы через спец.тестер печатной формы

Функция Печать() Экспорт
	вариантМакета = ПолучитьДополнительноеСвойство(""вариантМакета"");
	Если вариантМакета = """" Тогда
		вариантМакета = ""Основной"";
	КонецЕсли;
	
	Попытка
		_тестируемПечатнуюФорму = глЗначениеПеременной(""глТестированиеЗапущено"") <> Неопределено;
	Исключение
		_тестируемПечатнуюФорму = Ложь;
	КонецПопытки;
	
	Если вариантМакета = ""Основной"" Тогда
		Возврат Неопределено; //Возврат ПечатьОсновная();
	Иначе
	     ВызватьИсключение ""Неверный вариант макета <""+вариантМакета+"">"";
	КонецЕсли; 
КонецФункции

Функция ПолучитьДополнительноеСвойство(ИмяСвойства)
	значение = """";
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		Если НЕ ДополнительныеПараметры.Свойство(ИмяСвойства, значение) Тогда
			значение = """";
		КонецЕсли;
	КонецЕсли;
	Возврат значение;
КонецФункции

_тестируемПечатнуюФорму = Ложь;"}
},
{0,
{"Код для штатной печати документа + Тестирование Functest.v8",0,0,"","// макет Параметры_Авторегистрации - первая колонка - наименование типа Документы.РасходныйКассовыйОрдер

Перем	_тестируемПечатнуюФорму; //для прямого тестирования печатной формы через спец.тестер печатной формы

Перем	_выполняемТест;

// ============================  ============================  ============================  
//
// Блок для тестирования обработки/отчета в FunctTest
//
// ============================  ============================  ============================  

//	начальное заполнение данных при создании теста - необязательный метод
Функция ПервоначальноеЗаполнениеДанныхТеста(данныеДляТестирования) Экспорт
	тест = данныеДляТестирования.Тест;
		//артТесты.ПроверитьЗаполненность(тест, ""тест"");
	тест.УстановитьУсловиеЕслиОноНеЗаполнено(""вариантМакета"", ""Основной"");
		//тест.УстановитьУсловиеЕслиОноНеЗаполнено(""ВыбДата1"", '00010101');
		//тест.УстановитьУсловиеЕслиОноНеЗаполнено(""ВыбДата2"", '00010101');
		//тест.УстановитьУсловиеЕслиОноНеЗаполнено(""ВыбКлиент"", Справочники.Контрагенты.ПустаяСсылка());
		//тест.УстановитьУсловие(""ВыбСчет"", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		
	Возврат Истина;
КонецФункции

// выполнить перед тестированием какие-то начальные действия, инициализацию, открыть ресурсы (например, создать файлы) - необязательный метод
Функция Инит(данныеДляТестирования) Экспорт	
		//тест = данныеДляТестирования.тест;
	_выполняемТест = Истина;
	Возврат Истина;
КонецФункции

// после тестирования завершить действия, закрыть ресурсы (например, удалить файлы) - необязательный метод
Функция Сброс() Экспорт	
	_выполняемТест = Ложь;
	Возврат Истина;
КонецФункции

//
// конец блока тестирования обработки/отчета в FunctTest
//
// ============================  ============================  ============================  

Функция Печать() Экспорт
	вариантМакета = ПолучитьДополнительноеСвойство(""вариантМакета"");
	Если вариантМакета = """" Тогда
		вариантМакета = ""Основной"";
	КонецЕсли;
	
	Попытка
		_тестируемПечатнуюФорму = глЗначениеПеременной(""глТестированиеЗапущено"") <> Неопределено;
	Исключение
		_тестируемПечатнуюФорму = Ложь;
	КонецПопытки;
	
	Если вариантМакета = ""Основной"" Тогда
		Возврат Неопределено; //Возврат ПечатьОсновная();
	Иначе
	     ВызватьИсключение ""Неверный вариант макета <""+вариантМакета+"">"";
	КонецЕсли; 
КонецФункции

Функция ПолучитьДополнительноеСвойство(ИмяСвойства)
	значение = """";
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		Если НЕ ДополнительныеПараметры.Свойство(ИмяСвойства, значение) Тогда
			значение = """";
		КонецЕсли;
	КонецЕсли;
	Возврат значение;
КонецФункции

_выполняемТест = Ложь;

_тестируемПечатнуюФорму = Ложь;"}
}
},
{2,
{"Справочники",1,0,"",""},
{0,
{"Модуль формы элемента",0,0,"","// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

//Процедура устанавливает подменю ""Печать"" и кнопку ""Печать по умолчанию"" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие(""ОсновныеДействияФормыПечать""), Новый Действие(""ОсновныеДействияФормыУстановитьПечатьПоУмолчанию""));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие(""ОсновныеДействияФормыПечатьПоУмолчанию""));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	
	

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Печать по умолчанию""
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Печать""
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ""Установить печать по умолчанию""
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры

// Процедура вызывается принажатии кнопки в подменю ""Советы"" командной панели
// формы.
//
Процедура ДействияФормыОткрытьСоветы(Кнопка)
	
	РаботаСДиалогами.ОткрытьСоветы(Кнопка);
	
КонецПроцедуры //ДействияФормыОткрытьСоветы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка подменю ""Советы"".
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельФормы, ""Контрагенты"");
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
		
	Если ЭтоНовый() Тогда
	Иначе
	КонецЕсли;

	//// Проверка однофирменности
	//РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма, глЗначениеПеременной(""УчетПоВсемОрганизациям""), глЗначениеПеременной(""ОсновнаяОрганизация""), ""Договоры"");

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю);
	//МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю,ЭлементыФормы.Код);
КонецПроцедуры // ПриОткрытии()
"}
},
{0,
{"Модуль объекта",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	ТабДокумент = Неопределено;
	
	Если ИмяМакета = ""Печать"" Тогда
		// Получить экземпляр документа на печать
		//ТабДокумент = ПечатьВозвратаОтПокупателя();		
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);		
КонецПроцедуры // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура; //(""Печать"",""Печать"");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
"}
}
},
{0,
{"Заполнение табличной части",0,0,"","#Если Клиент Тогда
	
// макет Параметры_Авторегистрации - 
//	первая колонка Документы.РасходныйКассовыйОрдер, вторая колонка - имя табличной части

Процедура Инициализировать(Объект, ИмяТабличнойЧасти, ТабличноеПолеОбъекта) экспорт
	//Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(""Не выбран склад!"");
	//	Возврат;
	//КонецЕсли; 
	//счетБУ = ПланыСчетов.Хозрасчетный.ТМЦ;
	//Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
	//	Если ДополнительныеПараметры.Свойство(""СчетБУ"") Тогда
	//		кодСчетаБУ = ДополнительныеПараметры.счетБУ;
	//			артТесты.ПроверитьРавенство(ТипЗнч(кодСчетаБУ), Тип(""Строка""), ""Неверный тип параметра СчетБУ"");
	//		
	//		счетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду(кодСчетаБУ);
	//			артТесты.ПроверитьЗаполненность(счетБУ, ""Не найден счетБУ по коду <""+кодСчетаБУ+"">"");
	//	КонецЕсли;
	//КонецЕсли;
	
	//счетБУвДокументе = Объект.СчетБУ;
	//массивДолжностей = ПолучитьДолжностиЗаведующихСкладами();
	//Если НЕ ЗначениеЗаполнено(массивДолжностей) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//таблица = ПолучитьТаблицуСотрудниковСклада(Объект);
	//Если НЕ ЗначениеЗаполнено(таблица) Тогда
	//	Возврат;		
	//КонецЕсли; 
	//табличнаяЧасть = Объект[ИмяТабличнойЧасти];
	//табличнаяЧасть.Загрузить(таблица);
КонецПроцедуры

#КонецЕсли"}
},
{2,
{"Обработки",1,0,"",""},
{0,
{"Модуль выгрузки",0,0,"","Перем	_МенеджерВременныхТаблиц;
Перем	_ТекстЛог;
Перем 	_ДатаНачала;
Перем 	_ДатаОкончания;

Перем	_КаталогВыгрузки;

Перем	_Контракт;

Перем	КАТАЛОГ_ВЫГРУЗКИ_ПО_УМОЛЧАНИЮ;

Перем	_тест_путьКаталогаВыгрузки;

// основная процедура для юнит-тестирования SnowTest
Функция ПолучитьСписокТестов() Экспорт
	Результат = Я_Тест.Новый_НаборТестов();
	
	Я_Тест.НаборТестов_Добавить(Результат, ""Тесты_Выгрузить<?""Выберите наименование контракта"">"");
	
	Возврат Результат;
КонецФункции


// ======================= ======================= ======================= ======================= 
//
// БЛОК ОСНОВНОГО КОДА
//
// ======================= ======================= ======================= ======================= 

Функция ВключенаОтладкаРазработчиком() Экспорт
	#Если Клиент Тогда
		Если (мглИмя = ""Администратор"") Тогда
			Возврат Истина;
		КонецЕсли; 		                         
	#Иначе
		Возврат Истина; // TODO !!
	#КонецЕсли 
	
	Возврат Ложь;
	//Возврат Истина;
КонецФункции

Функция ПолучитьИмяОтчета() Экспорт
	Возврат ""Экспорт.<?""Выберите наименование контракта"">"";
КонецФункции

Функция Выгрузить<?""Выберите наименование контракта"">(Дата1, Дата2, КаталогВыгрузки1 = """") Экспорт
	Инит(Дата1, Дата2);
	
	успешно = Выполнить_Выгрузку(КаталогВыгрузки1);
	Если НЕ успешно Тогда Возврат Ложь; КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура Инит(Дата1, Дата2) Экспорт
	Сброс();
	
	_ТекстЛог = Новый ТекстовыйДокумент;
	_МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьКонтракт_<?""Выберите наименование контракта"">();
	
	УстановитьПериод(Дата1, Дата2);
КонецПроцедуры

Функция ПолучитьКаталогВыгрузкиПоУмолчанию() Экспорт
	Возврат КАТАЛОГ_ВЫГРУЗКИ_ПО_УМОЛЧАНИЮ;
КонецФункции

Процедура УстановитьПериод(Дата1, Дата2)
	_ДатаНачала = НачалоДня(Дата1);
	_ДатаОкончания = КонецДня(Дата2);
КонецПроцедуры

Функция ПроверитьПериод(ДатаНачала, ДатаОкончания) //Экспорт
	Если НачалоДня(ДатаНачала) > КонецДня(ДатаОкончания) Тогда
		ВывестиСообщение(""Выбран неверный период."");
		Возврат Ложь;
	КонецЕсли; 
	Если ДатаНачала = '00010101' или ДатаОкончания = '00010101' Тогда
		ВывестиСообщение(""Не задан период выгрузки"");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура Сброс()
	_ДатаНачала = '00010101';
	_ДатаОкончания = _ДатаНачала;
	
	_ТекстЛог = Новый ТекстовыйДокумент;
	_МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
КонецПроцедуры
 
Функция ПолучитьТекстЛог() Экспорт
	Возврат _ТекстЛог;
КонецФункции
 
Процедура ВывестиСообщение(Сообщение) //Экспорт
	_ТекстЛог.ДобавитьСтроку(Сообщение);
	#Если Клиент Тогда
		Сообщить(ПолучитьИмяОтчета()+ "": ""+Сообщение, СтатусСообщения.Информация);
	#КонецЕсли 
	//#Иначе
	ЗаписьЖурналаРегистрации(ПолучитьИмяОтчета(), УровеньЖурналаРегистрации.Информация, , , Сообщение, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	//#КонецЕсли 
КонецПроцедуры
 
Процедура Лог(Сообщение) //Экспорт
	Если НЕ ВключенаОтладкаРазработчиком() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиСообщение(Сообщение);
КонецПроцедуры

Процедура ВывестиСостояние(Сообщение)
	#Если Клиент Тогда
		Состояние(Сообщение);
	#Иначе
	#КонецЕсли 
КонецПроцедуры

Функция ПолучитьКонтракт_<?""Выберите наименование контракта"">() Экспорт
	_Контракт = артМодули.НайтиСуществующийОбъектПоСвойству(ПланыВидовХарактеристик.СвойстваОбъектов.Контракт_<?""Выберите наименование контракта"">);
	Возврат _Контракт;
КонецФункции

Функция Выполнить_Выгрузку(КаталогВыгрузки1)
	Возврат Ложь;
КонецФункции

// ======================= ======================= ======================= ======================= 
//
// БЛОК ЮНИТ-ТЕСТОВ - сами тесты
//
// ======================= ======================= ======================= ======================= 

Процедура Тесты_Выгрузить() Экспорт
КонецПроцедуры
		
_тест_путьКаталогаВыгрузки = ""w:\"";

// ======================= ======================= ======================= ======================= 
//
// КОНЕЦ БЛОКА ЮНИТ-ТЕСТОВ
//
// ======================= ======================= ======================= ======================= 
"}
},
{0,
{"Обработка с отбором на базе СКД",0,0,"","// 1. добавить реквизит формы КомпоновщикНастроек с типом КомпоновщикНастроекКомпоновкиДанных
// 2. на форму вывести табличное поле КомпоновщикНастроек.Настройки.Отбор
// 3. Настройки в макетах со схемой компоновки данных должны быть детальными или с группировками

Перем	ИМЯ_НАСТРОЙКИ_ДЛЯ_СОХРАНЕНИЯ_КОМПОНОВЩИКА_НАСТРОЕК;

Процедура ВыполнитьНажатие(Элемент)
	Если НЕ ПроверитьНастройкиПериода() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений = ПолучитьТаблицуЗначенийИзМакетаСКДиТекущегоОтбора(""ПКО_ОплатаПокупателю""); // можно юзать один макет для отбора, а при выполнении другой - главное, чтобы установленные поля отбора были в обоих макетах
	Если ТаблицаЗначений.количество() = 0 Тогда
		Сообщить(""Не найдено документов по отбору! Обработка не выполнена."");
		Возврат;
	КонецЕсли; 
	Возврат;
	
	индикатор = ЛксПолучитьИндикаторПроцесса(ТаблицаЗначений.количество());
	
	Для каждого строка Из ТаблицаЗначений Цикл
		ЛксОбработатьИндикатор(индикатор);
		
		//ДокОбъект = строка.ссылка.получитьОбъект();
		//ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	//ЛксСообщитьИтогИндикации(индикатор);
КонецПроцедуры

// автовосстановление настроек отбора
Процедура ПриОткрытии()
	ИнициализироватьКомпоновщикНастроек(""Макет""); // можно юзать один макет для отбора, а при выполнении другой - главное, чтобы установленные поля отбора были в обоих макетах
	ВосстановитьНастройкиОтбора(ВосстановитьЗначение(ИМЯ_НАСТРОЙКИ_ДЛЯ_СОХРАНЕНИЯ_КОМПОНОВЩИКА_НАСТРОЕК));
КонецПроцедуры

// автосохраняем настройки отбора
Процедура ПриЗакрытии()
	СохранитьНастройкиОтбора();
КонецПроцедуры

Процедура СохранитьНастройкиОтбора()
	// TODO в будущем подумать над сохранением настроек в справочник.СохраненныеНастройки, если нужно пользователям
	СохранитьЗначение(ИМЯ_НАСТРОЙКИ_ДЛЯ_СОХРАНЕНИЯ_КОМПОНОВЩИКА_НАСТРОЕК, КомпоновщикНастроек.ПолучитьНастройки());
КонецПроцедуры
 
Процедура ВосстановитьНастройкиОтбора(новыеНастройкиКомпоновщикиНастроек)
	///Возврат;
	Попытка
		элементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		элементыОтбора.Очистить();
		Для Каждого новыйЭлемент Из новыеНастройкиКомпоновщикиНастроек.Отбор.Элементы Цикл
			ДобавитьЭлементыИГруппыЭлементовВКоллекцию(элементыОтбора, новыйЭлемент);
		КонецЦикла;
	Исключение
	    //ОписаниеОшибки()
	КонецПопытки;
	КомпоновщикНастроек.Восстановить();
КонецПроцедуры

Процедура ДобавитьЭлементыИГруппыЭлементовВКоллекцию(коллекция, ЭлементИлиГруппаЭлементов)
	типЭлемента = ТипЗнч(ЭлементИлиГруппаЭлементов);
	новыйЭлементИлиГруппа = коллекция.Добавить(типЭлемента);
	ЗаполнитьЗначенияСвойств(новыйЭлементИлиГруппа, ЭлементИлиГруппаЭлементов);
	Если типЭлемента = Тип(""ГруппаЭлементовОтбораКомпоновкиДанных"") Тогда
		Для каждого элемент1 Из ЭлементИлиГруппаЭлементов.Элементы Цикл
			ДобавитьЭлементыИГруппыЭлементовВКоллекцию(новыйЭлементИлиГруппа.Элементы, элемент1);
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры
 
Процедура ИнициализироватьКомпоновщикНастроек(имяМакета)
	СхемаКомпоновкиДанных = ПолучитьМакет(имяМакета); //""Макет""); 
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(""НачалоПериода"");
	ПараметрДанныхНачалоПериода.Значение = НачалоДня(ВыбДата1);
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(""КонецПериода"");
	ПараметрДанныхКонецПериода.Значение = КонецДня(ВыбДата2);
	ПараметрДанныхКонецПериода.Использование = Истина;
КонецПроцедуры

Функция ПолучитьТаблицуЗначенийИзМакетаСКДиТекущегоОтбора(имяМакетаСКД)
	СхемаКомпоновкиДанных = ПолучитьМакет(имяМакетаСКД); 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат ТаблицаЗначений;
КонецФункции

Функция ПроверитьНастройкиПериода() Экспорт
	Если Не ЗначениеЗаполнено(ВыбДата1) Тогда
		Сообщить(""Не заполнена дата начала. Обработка остановлена."");
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыбДата2) Тогда
		Сообщить(""Не заполнена дата начала. Обработка остановлена."");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

ИМЯ_НАСТРОЙКИ_ДЛЯ_СОХРАНЕНИЯ_КОМПОНОВЩИКА_НАСТРОЕК = Метаданные().Имя;"}
}
},
{0,
{"""Перезагрузить"" для внешних отчетов/обработок",0,0,"","// код для перезапуска внешнего отчета - неуправляемая форма
// http://forum.infostart.ru/forum24/topic45153/message487786/#postform
//В итоге совместных усилий имеем следующее: 
//1. Всего одна коротенькая процедура, вызываемая нажатием на кнопку. 
//2. Не нужны дополнительные реквизиты. Так же не нужны вставки кода в процедуры событий формы. 
//3. Процедура работает как для внешних обработок, так и для внешних отчетов. 
//4. Очень легко вставляется в новые внешние обработки и отчеты (одна кнопка и одна процедура).
//На кнопку ""Перезапустить"" вешаем следующую процедуру: 
Процедура кнПерезапустить_Нажатие(Кнопка)
	//ЭтотОбъект = ЭтаФорма.ЭтотОбъект;
	ИмяФормы = """";
	Для каждого МетаФорма Из ЭтотОбъект.Метаданные().Формы Цикл
		ТекФорма = ЭтотОбъект.ПолучитьФорму(МетаФорма.Имя);
		Если ТекФорма.Открыта() Тогда
			ТекФорма.Закрыть();
		КонецЕсли;
		Если ТекФорма = ЭтаФорма Тогда
			ИмяФормы = МетаФорма.Имя;
		КонецЕсли;
	КонецЦикла;
	Попытка
		Пустышка = ЭтотОбъект.СхемаКомпоновкиДанных;
		ЭтоОтчет = Истина;
	Исключение
		ЭтоОтчет = Ложь;
	КонецПопытки;
	Если ЭтоОтчет Тогда
		МенеджерТипаОбъектов = ВнешниеОтчеты;
	Иначе
		МенеджерТипаОбъектов = ВнешниеОбработки;
	КонецЕсли;
	МенеджерТипаОбъектов.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(ИмяФормы).Открыть();
КонецПроцедуры
"}
},
{0,
{"Добавить кнопку ""Перезагрузить"" для внешних отчетов/обработок",0,0,"","
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

    ПерезапуститьВнешнююОбработку();

КонецПроцедуры

// http://infostart.ru/public/104428/
Процедура ПерезапуститьВнешнююОбработку()

    КоманднаяПанель = ЭтаФорма.ЭлементыФормы.Найти(""ОсновныеДействияФормы"");
    КоманднаяПанель_Существует = КоманднаяПанель <> Неопределено;
    ФайлКлюч = Новый Файл(""C:\Development.1C"");
    ФайлКлюч_Существует = ФайлКлюч.Существует();

    Если (НЕ КоманднаяПанель_Существует) ИЛИ (НЕ ФайлКлюч_Существует) Тогда
        Возврат;
    КонецЕсли;

    КнопкаПерезапустить_Существует = КоманднаяПанель.Кнопки.Найти(""Перезапустить"") <> Неопределено;

    Если КнопкаПерезапустить_Существует Тогда

        //Использовать кнопку
        Для Каждого Форма Из ЭтаФорма.Метаданные().Формы Цикл

            Если НЕ ПолучитьФорму(Форма) = ЭтаФорма Тогда
                Продолжить;
            КонецЕсли;

            Закрыть();
            ЭтоОбработка = Найти(Строка(ТипЗнч(ЭтотОбъект)), ""Внешняя обработка объект:"") = 1;

            Если ЭтоОбработка Тогда
                ВнешниеОбработки.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(Форма.Имя).Открыть();
            Иначе ВнешниеОтчеты.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(Форма.Имя).Открыть();
            КонецЕсли;

        КонецЦикла;

    Иначе

        //Добавить кнопку
        Действие = Новый Действие(""ПерезапуститьВнешнююОбработку"");
        НоваяКнопка = КоманднаяПанель.Кнопки.Добавить(""Перезапустить"", ТипКнопкиКоманднойПанели.Действие, ""Перезапустить"", Действие);
        НоваяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F4, , , Истина); // Shift-F4

    КонецЕсли;

КонецПроцедуры"}
},
{0,
{"Подмена обработки на обработку из Спр.ВнешниеОбработки",0,0,"","Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	лТипОбъекта = """"+ТипЗнч(ЭтотОбъект);
	Если Найти(лТипОбъекта, ""Внешняя обработка"") = 0 и Найти(лТипОбъекта, ""Внешний отчет"") = 0 Тогда
		имяОтчетаВСправочнике = ""<?""Наименование в справочнике внешних обработок"">"";
		видОтчета = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		лОбработка = артМодули.ПолучитьВнешнийОбъектИзСправочникаВнешнихОбработок(имяОтчетаВСправочнике, видОтчета);
		лОбработка.ПолучитьФорму().Открыть();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"ПриПолученииДанных - пример правильной обработки события и условий оформления",0,0,"","Перем _ЗапросПриПолученииДанных;

Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	Массив = Новый Массив; // для передачи в параметр запроса 
	Соответствие = Новый Соответствие; // для заполнения остатков в строках табличного поля 

	Для Каждого ОформлениеСтроки из ОформленияСтрок Цикл 
		лДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		лСсылка = лДанныеСтроки.Ссылка;
		Массив.Добавить(лСсылка); 
		Соответствие.Вставить(лСсылка, ОформлениеСтроки); 
		
			//Если лДанныеСтроки.НеИспользуется Тогда
			//	ОформлениеСтроки.ЦветФона = WebЦвета.БледноЗолотистый; //ЦветаСтиля.ЦветФонаФормы; 
			//Иначе
			//	ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
			//КонецЕсли; 
	КонецЦикла; 

	Если ТипЗнч(_ЗапросПриПолученииДанных) <> Тип(""Запрос"") Тогда
		_ЗапросПриПолученииДанных = Новый Запрос;
		_ЗапросПриПолученииДанных.Текст = ""ВЫБРАТЬ
		                                  |	Договоры.Ссылка
		                                  |ИЗ
		                                  |	Справочник.артДоговорыКонтрагентовПоОрганизациям КАК Договоры
		                                  |ГДЕ
		                                  |	Договоры.Ссылка В (&Массив)
		                                  |	И Договоры.ДатаОкончания >= ДатаОкончания
		                                  |"";
		_ЗапросПриПолученииДанных.УстановитьПараметр(""ДатаОкончания"", НачалоДня(ТекущаяДата()));
	
	КонецЕсли;
	
	_ЗапросПриПолученииДанных.УстановитьПараметр(""Массив"", Массив); 

	Выборка = _ЗапросПриПолученииДанных.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		ОформлениеСтроки = Соответствие.Получить(Выборка.Ссылка);
		Ячейки = ОформлениеСтроки.Ячейки;
			//Ячейки.НомерСертификата.Значение = выборка.НомерСертификата;
		
		ОформлениеСтроки.ЦветФона = 	WebЦвета.ДымчатоБелый;
		ОформлениеСтроки.ЦветТекста = Новый Цвет(55,55,55);
			//Если Выборка.НеИспользуется Тогда
			//	ОформлениеСтроки.ЦветФона = WebЦвета.БледноЗолотистый; //ЦветаСтиля.ЦветФонаФормы; 
			//ИначеЕсли Выборка.ЭтоОсновнойБанковскийСчет Тогда
			//	ОформлениеСтроки.ЦветФона = WebЦвета.ЗеленоЖелтый; //ЦветаСтиля.ЦветФонаФормы; 
			//КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
"}
},
{0,
{"УФ: Добавить динамически кнопку",0,0,"","&НаСервере
Процедура СоздатьКнопкуПерезагрузитьФормуНаКоманднойПанелиФормы(заголовокКнопки = ""Перезагрузить форму"", ТолькоВоВсехДействиях = Истина)
	//Добавляем новую команду
	Кмд = ЭтаФорма.Команды.Добавить(""ПерезагрузитьФорму_168733"");
	Кмд.Действие = ""ПерезагрузитьФорму"";
	Кмд.Заголовок = заголовокКнопки; //""Перезагрузить форму"";
	
	лКоманднаяПанель = Элементы.Найти(""ФормаКоманднаяПанель"");
	нашлиКоманднуюПанель = лКоманднаяПанель <> Неопределено;
	Если нашлиКоманднуюПанель Тогда
		нашлиКоманднуюПанель = лКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	КонецЕсли;
	
	лВладелецФормы = ?(нашлиКоманднуюПанель, лКоманднаяПанель, ЭтаФорма);
	
	//Добавляем новую кнопку
	Элемент2 = ЭтаФорма.Элементы.Добавить(""ПерезагрузитьФорму_168733"", Тип(""КнопкаФормы""), лВладелецФормы);
	Элемент2.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; //ОбычнаяКнопка;
	Элемент2.ИмяКоманды = Кмд.Имя; //""Команда1"";
	Элемент2.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
КонецПроцедуры

"}
}
},
{3,
{"Управляющие",1,0,"",""},
{0,
{"Если (Есл[и]) в одну строку",0,0,"Есл[и]","Если <?> Тогда КонецЕсли;"}
},
{0,
{"КонецЕсли",0,0,"ке","КонецЕсли;
"}
},
{0,
{"КонецЦикла",0,0,"кц","КонецЦикла;
"}
}
},
{9,
{"Внешние данные",1,0,"",""},
{0,
{"Перебор DBF-файла - Быстрый",0,0,"","ДБФ=Новый XBase; 
ДБФ.ОткрытьФайл(СокрЛП(ПутьКФайлу));  
КолЗаписей=ДБФ.КоличествоЗаписей();

индикатор = ЛксПолучитьИндикаторПроцесса(КолЗаписей);

ДБФ.Первая();
Для инд=1 по КолЗаписей Цикл //   100
	Если инд <> 1 И НЕ ДБФ.Следующая() Тогда
		Прервать;
	КонецЕсли; 
	ЛксОбработатьИндикатор(индикатор);
	
	// тело цикла
КонецЦикла; 
//ЛксСообщитьИтогИндикации(индикатор);
"}
},
{0,
{"Создать DBF-файл - процедура",0,0,"","Функция СоздатьФайлДБФ(БазаДБФ, ИмяФайлаБезРасширения)
	путьФайла = """"+ПолучитьКаталогВыгрузки()+ИмяФайлаБезРасширения+"".dbf"";
		//путьФайла = """"+ПолучитьКаталогВыгрузки()+""c""+ИмяФайлаБезРасширения+"".dbf"";
	БазаДБФ.Кодировка=КодировкаXBase.OEM;
	БазаДБФ.СоздатьФайл(путьФайла);	
	БазаДБФ.АвтоСохранение=Истина;      
	
	Попытка
		БазаДБФ.ОчиститьФайл(); 
	Исключение
	    ВызватьИсключение ОписаниеОшибки()+Символы.ПС+""Ошибка создания DBF-файла <""+путьФайла+"">"";
	КонецПопытки; 
	
	Возврат путьФайла;
КонецФункции

"}
},
{0,
{"Открыть DBF-файл - процедура",0,0,"","Функция ОткрытьФайлДБФ(имяФайла)
		артТесты.ПроверитьЗаполненность(имяФайла, ""имяФайла"");
		артТесты.ПроверитьЗаполненность(_КаталогВыгрузки, ""_КаталогВыгрузки"");
	ДБФ = Новый XBase;
	ДБФ.Кодировка = КодировкаXBase.OEM;
	ДБФ.ОткрытьФайл(_КаталогВыгрузки + имяФайла,,Истина);
	Возврат ДБФ;
КонецФункции
"}
},
{0,
{"Прочитать Excel (Быстрый)",0,0,"","// http://infostart.ru/public/20090/
//
Функция ПрочитатьЛистExcel(ТЗ = Неопределено, ЛистЭксель = Неопределено, НомерПервойСтроки = 1, НомерПервойКолонки = 1, ВсегоСтрок = 0, ВсегоКолонок = 0) Экспорт
	Если ЛистЭксель = Неопределено Тогда
		ЛистЭксель = ПолучитьCOMОбъект(,""Excel.Application"");
	КонецЕсли;
	Если ВсегоСтрок = 0 Тогда
		ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row;
	КонецЕсли;
	Если ВсегоКолонок = 0 Тогда
		ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	КонецЕсли;
	Если ТЗ = Неопределено Тогда
		ТЗ =  Новый ТаблицаЗначений;
		Для Счетчик = 1 По ВсегоКолонок Цикл
			ТЗ.Колонки.Добавить(""Колонка""+Счетчик, Новый ОписаниеТипов(""Строка""));
		КонецЦикла;
	КонецЕсли;
	Для Счетчик = НомерПервойСтроки По ВсегоСтрок Цикл
		НоваяСтрока = ТЗ.Добавить();
	КонецЦикла;
	
	Область = ЛистЭксель.Range(ЛистЭксель.Cells(НомерПервойСтроки,НомерПервойКолонки), ЛистЭксель.Cells(ВсегоСтрок,ВсегоКолонок));
	Данные = Область.Value.Выгрузить();
	
	Для Счетчик = 0 По ВсегоКолонок-1 Цикл
		ТЗ.ЗагрузитьКолонку(Данные[Счетчик], Счетчик);
	КонецЦикла;
	ЛистЭксель = Неопределено;
	Возврат ТЗ;
КонецФункции"}
},
{0,
{"Чтение больших текстовых файлов (CSV)",0,0,"","//Чтение больших текстовых файлов (CSV) http://infostart.ru/public/98398/
//Две функции чтения CSV файла и возврата Таблицы Значений с данными файла с использованием COM объекта ADODB.Recordset и внешней компоненты GameWithFire.
//Не люблю изобретать велосипед, поэтому первое что делаю при необходимости его изобрести пользуюсь поиском.
//Делюсь результатом моих поисков (абсолютный копи-паст), который, думаю, поможет и другим, на форуме есть пара не закрытых веток на эту тему. А для моего случая (загрузка большого количества csv файлов в ТЗ) - лучше и не надо.
//Спасибо автору данного решения The gray Cardinal.
//Публикуется с согласия автора.
//Первоисточник http://forum.mista.ru/topic.php?id=541199
// и сами функции http://ibigdan.livejournal.com/9529940.html
//
Функция ПрочитатьCSV(Папка, ИмяФайла, КолПолей)

    // Параметры:

    // ""Папка"" - путь к файлу без имени файла с завершающим слешем,

    // ""ИмяФайла"" - имя файла,

    // ""КолПолей"" - количество колонок (число).

    // Функция возвращает ТаблицуЗначений с данными файла.



    Текст = ""["" + ИмяФайла + ""]

    |ColNameHeader=False

    |Format=Delimited(;)

    |TextDelimiter=none

    |CharacterSet=ANSI

    |"";

    Для ы = 1 По КолПолей Цикл

        Текст = Текст + ""Col"" + ы + ""=Field"" + ы + "" Text"" + Символы.ПС;

    КонецЦикла;

    ТекстДок = Новый ТекстовыйДокумент;

    ТекстДок.УстановитьТекст(Текст);

    ТекстДок.Записать(Папка + ""Schema.ini"");



    objRec = Новый COMОбъект(""ADODB.Recordset"");

    strQuery = ""SELECT * FROM ["" + ИмяФайла + ""]"";

    strConn = ""Provider=Microsoft.Jet.OLEDB.4.0;Data Source="" + Папка + "";Extended Properties=""""text;"""""";

    adOpenStatic = 3;

    adLockOptimistic = 3;

    adCmdText = 1;

    ТаблЗнач = Новый ТаблицаЗначений;

    Для ы = 1 По КолПолей Цикл

        ТаблЗнач.Колонки.Добавить();

    КонецЦикла;



    objRec.Open(strQuery, strConn, adOpenStatic, adLockOptimistic, adCmdText);

    КолСтрок = objRec.RecordCount;

    Ном = 1;

    Пока Не objRec.EOF Цикл

        Если Ном % 500 = 0 Тогда

            Состояние(ИмяФайла + "" "" + Ном + "" из "" + КолСтрок);

        КонецЕсли;

        НовСтр = ТаблЗнач.Добавить();

        Для i=0 По objRec.Fields.Count-1 Цикл

            НовСтр[i] = Строка(objRec.Fields(i).Value);

        КонецЦикла;

        objRec.MoveNext();

        Ном = Ном + 1;

    КонецЦикла;

    objRec.Close();

    Возврат ТаблЗнач;

КонецФункции

Функция ПрочитатьCSV_2(Папка, ИмяФайла, КолПолей)

    // Параметры:

    // ""Папка"" - путь к файлу без имени файла с завершающим слешем,

    // ""ИмяФайла"" - имя файла,

    // ""КолПолей"" - количество колонок (число).

    // Функция возвращает ТаблицуЗначений с данными файла.



    Текст = ""["" + ИмяФайла + ""]

    |ColNameHeader=False

    |Format=Delimited(;)

    |TextDelimiter=none

    |CharacterSet=ANSI

    |"";

    Для ы = 1 По КолПолей Цикл

        Текст = Текст + ""Col"" + ы + ""=Field"" + ы + "" Text"" + Символы.ПС;

    КонецЦикла;

    ТекстДок = Новый ТекстовыйДокумент;

    ТекстДок.УстановитьТекст(Текст);

    ТекстДок.Записать(Папка + ""Schema.ini"");



    objRec = Новый COMОбъект(""ADODB.Recordset"");

    strQuery = ""SELECT * FROM ["" + ИмяФайла + ""]"";

    strConn = ""Provider=Microsoft.Jet.OLEDB.4.0;Data Source="" + Папка + "";Extended Properties=""""text;"""""";

    adOpenStatic = 3;

    adLockOptimistic = 3;

    adCmdText = 1;

    objRec.Open(strQuery, strConn, adOpenStatic, adLockOptimistic, adCmdText);



    ПодключитьВнешнююКомпоненту(""GameWithFire.ADOUtils"");

    ADOUtils = Новый(""AddIn.ADOUtils"");

    Возврат ADOUtils.ADORecordsetToValueTable(objRec);

КонецФункции"}
},
{0,
{"ЗаписьЖурналаРегистрации",0,0,"","ЗаписьЖурналаРегистрации(""Реализация.ПродажаНижеЗакупочнойЦены"", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.РасходнаяНакладная, Ссылка, сообщениеПродажаНижеЗакупочнойЦены);
"}
},
{0,
{"Чтение XML-файла - http://infostart.ru/public/16386",0,0,"","// Отличная простая функция http://www.forum.mista.ru/topic.php?id=524624 Автор http://infostart.ru/public/16386/
// Параметр Дерево - либо Неопределено (заполнение автоматически), либо Дерево значений с колонками Реквизит, Значение, Тип (все строки)
Функция XMLСобратьДерево(Файл, Дерево) Экспорт
	Если НЕ ЗначениеЗаполнено(Дерево) Тогда
		Дерево = Новый ДеревоЗначений;
		Дерево.Колонки.Добавить(""Реквизит"");
		Дерево.Колонки.Добавить(""Значение"");
		Дерево.Колонки.Добавить(""Тип"");
	КонецЕсли;
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(Файл);
	Строки = Дерево.Строки; //Т.Строки;
	Строки.Очистить();
	НоваяСтрока = Дерево; //Т;
	Пока Чтение.Прочитать() Цикл
		Реквизит = СокрЛП(Чтение.Имя);
		Значение = СокрЛП(Чтение.Значение);
		ТипУзла = СокрЛП(Чтение.ТипУзла);
		Если ТипУзла = ""Начало элемента"" Тогда
			НоваяСтрока = НоваяСтрока.Строки.Добавить();
			НоваяСтрока.Реквизит = Реквизит;
			НоваяСтрока.Тип = ""Узел"";
			Если Чтение.КоличествоАтрибутов() <> 0 Тогда
				Строки = НоваяСтрока.Строки;
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Атрибут = Строки.Добавить();
					Атрибут.Реквизит = Чтение.Имя;
					Атрибут.Значение = Чтение.Значение;
					Атрибут.Тип = ""Атрибут"";
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипУзла = ""Конец элемента"" Тогда
			НоваяСтрока = НоваяСтрока.Родитель;
		Иначе
			НоваяСтрока.Значение = Значение;
		КонецЕсли;
	КонецЦикла;
	Чтение.Закрыть();
	Возврат Истина;
КонецФункции
"}
},
{0,
{"Еще пример чтения XML-файла - из книги Энциклопедия разработчика (есть в шаблонах)",0,0,"","Файл = Новый ЧтениеXML;
Файл.ОткрытьФайл(""c:\document.xml"");

// Прочитать фрагменты элемента 
Пока Файл.Прочитать() Цикл
	
	// После чтения проверить тип уза
	Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
  		Сообщить(Файл.Имя);

		// Прочитать атрибуты
		Пока Файл.ПрочитатьАтрибут() Цикл
			Сообщить(""атрибут:"" + Файл.Имя + ""="" + Файл.Значение);	  
		КонецЦикла;	  
	КонецЕсли;	

	Если Файл.ТипУзла = ТипУзлаXML.Текст Тогда
  		Сообщить(Файл.Значение);
	КонецЕсли;	

	Если Файл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
  		Сообщить(""/"" + Файл.Имя);
	КонецЕсли;	
КонецЦикла;	
Файл.Закрыть();
"}
},
{0,
{"Прочитать Excel-файл через OpenOffice Calc или MS Excel (универсально - набор процедур)",0,0,"","// читаем файлы Excel через ОпенОффис или MS Excel - в зависимости от установленной программы на компьютере
// ИмяИлиНомерЛиста - строка с именем листа или число - номер листа (нумерация с 1)
Функция ПолучитьТаблицуДанныхИзФайлаExcelИлиOpenOffice(ПутьКФайлу, ИмяИлиНомерЛиста) Экспорт
	
	#Если Клиент Тогда
		Состояние(""Открываю файл..."");
	#КонецЕсли 
	
	ЧерезЭксель = Ложь;
	
	Попытка		
		ServiceManager = Новый COMОбъект(""com.sun.star.ServiceManager"");
	Исключение
		ЧерезЭксель = Истина;		
	КонецПопытки;
	
	Попытка 
		
		Если ЧерезЭксель Тогда		
			
			ExcelПриложение = Новый COMОбъект(""Excel.Application"");
			ExcelФайл = ExcelПриложение.WorkBooks.Open(ПутьКФайлу);
			
			#Если Клиент Тогда
				Состояние(""Загружаю данные из файла..."");
			#КонецЕсли 
			
			Данные = Неопределено;
			ЛистЕксель = НайтиЛистExcel(ExcelФайл, ИмяИлиНомерЛиста);	
			Если ЛистЕксель = Неопределено Тогда
				Сообщить(""В файле не найден лист ""+ИмяИлиНомерЛиста);
			Иначе
				ПрочитатьЛистExcel(Данные, листЕксель, , , , ); 
			КонецЕсли;
			
			ExcelПриложение.ActiveWorkbook.Close();
			ExcelПриложение.Quit();
			
			Возврат Данные;
						
		Иначе
			
			Возврат ПрочитатьЛистOpenOfficeCalc(ПутьКФайлу, ИмяИлиНомерЛиста, ServiceManager);
			
		КонецЕсли;
		
		
	Исключение		

		Сообщить(ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
		
		Если ЧерезЭксель Тогда
			Попытка
				ExcelПриложение.ActiveWorkbook.Close();
				ExcelПриложение.Quit();
			Исключение
			    //ОписаниеОшибки()
			КонецПопытки; 			
		КонецЕсли;
		
		Возврат Неопределено;			
	КонецПопытки;
		
КонецФункции

// возвращает созданную или переданную ТЗ. В случае ошибки возвращается Неопределено
Функция ПрочитатьЛистExcel(ТЗ = Неопределено, ЛистЭксель = Неопределено, НомерПервойСтроки = 1, НомерПервойКолонки = 1, ВсегоСтрок = 0, ВсегоКолонок = 0) Экспорт
	Если ЛистЭксель = Неопределено Тогда
		ЛистЭксель = ПолучитьCOMОбъект(,""Excel.Application"");
	КонецЕсли;
	Если ВсегоСтрок = 0 Тогда
		ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row;
	КонецЕсли;
	Если ВсегоКолонок = 0 Тогда
		ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	КонецЕсли;
	Если ТЗ = Неопределено Тогда
		ТЗ =  Новый ТаблицаЗначений;
		Для Счетчик = 1 По ВсегоКолонок Цикл
			ТЗ.Колонки.Добавить(""Колонка""+Счетчик, Новый ОписаниеТипов(""Строка""));
		КонецЦикла;
	КонецЕсли;
	Для Счетчик = НомерПервойСтроки По ВсегоСтрок Цикл
		НоваяСтрока = ТЗ.Добавить();
	КонецЦикла;
	
	Область = ЛистЭксель.Range(ЛистЭксель.Cells(НомерПервойСтроки,НомерПервойКолонки), ЛистЭксель.Cells(ВсегоСтрок,ВсегоКолонок));
	Данные = Область.Value.Выгрузить();
	
	Для Счетчик = 0 По ВсегоКолонок-1 Цикл
		ТЗ.ЗагрузитьКолонку(Данные[Счетчик], Счетчик);
	КонецЦикла;
	//ЛистЭксель = Неопределено;
	Возврат ТЗ;
КонецФункции

// ИмяИлиНомерЛиста - строка с именем листа или число - номер листа (нумерация с 1)
// Возвращает Лист, если найдено, или Неопределено, если не найдено
Функция НайтиЛистExcel(ExcelФайл, ИмяИлиНомерЛиста)
	КоллекцияЛистов = ExcelФайл.Sheets;
	КоличествоЛистов = КоллекцияЛистов.Count;
	Лист = Неопределено;
	
	Если ТипЗнч(ИмяИлиНомерЛиста) = Тип(""Число"") Тогда
		Лист = КоллекцияЛистов.Item(ИмяИлиНомерЛиста);			
		Возврат Лист;
	ИначеЕсли ТипЗнч(ИмяИлиНомерЛиста) <> Тип(""Строка"") Тогда
		ВызватьИсключение ""неверный тип параметра ИмяИлиНомерЛиста"";
	КонецЕсли;
	
	ВрИмяЛистаСТабелем = ВРЕГ(ИмяИлиНомерЛиста);
	Для а =1 По КоличествоЛистов Цикл
		Лист = КоллекцияЛистов.Item(а);
		Если ВРЕГ(СокрЛП(Лист.Name)) = ИмяИлиНомерЛиста Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Лист;	
КонецФункции

// возвращает созданную или переданную ТЗ. В случае ошибки возвращается Неопределено
// ИмяИлиНомерЛиста - строка с именем листа или число - номер листа (нумерация с 1)
Функция ПрочитатьЛистOpenOfficeCalc(ПутьКФайлу, ИмяИлиНомерЛиста, ServiceManager = Неопределено)
		//закрыватьServiceManager = Ложь;
	Если ServiceManager = Неопределено Тогда
		ServiceManager = Новый COMОбъект(""com.sun.star.ServiceManager"");
			//закрыватьServiceManager = Истина;
	КонецЕсли;
	
	//OpenOffice Calc//////////////////////////////////////////////////////////////////////////////////////////////
	Desktop = ServiceManager.createInstance(""com.sun.star.frame.Desktop"");
	Свойства = ServiceManager.Bridge_GetStruct(""com.sun.star.beans.PropertyValue"");
	
	Свойства.Name = ""AsTemplate"";
	Свойства.Value = Истина;
	Args = Новый COMSafeArray(""VT_VARIANT"", 2);
	Args.SetValue(0, Свойства);
	
	Свойства1 = ServiceManager.Bridge_GetStruct(""com.sun.star.beans.PropertyValue"");
	Свойства1.Name = ""Hidden"";
	Свойства1.Value = Истина;
	Args.SetValue(1,Свойства1);
	
	Document = Desktop.LoadComponentFromURL(ПривестиФайлКУРЛ(ПутьКФайлу), ""_blank"", 0, Args);
	Sheets = Document.getSheets();
	
	Попытка
		Если ТипЗнч(ИмяИлиНомерЛиста) = Тип(""Число"") Тогда
			Sheet = Sheets.getByIndex(ИмяИлиНомерЛиста-1);			
		ИначеЕсли ТипЗнч(ИмяИлиНомерЛиста) = Тип(""Строка"") Тогда
			Sheet = Sheets.getByName(ИмяИлиНомерЛиста);
		Иначе
			ВызватьИсключение ""неверный тип параметра ИмяИлиНомерЛиста"";
		КонецЕсли;
	Исключение
		
		Сообщить(""В файле не найден лист ""+ИмяИлиНомерЛиста);
		ServiceManager = Неопределено;
		Desktop = Неопределено;	
		
		Возврат Неопределено;
	КонецПопытки;
	
	#Если Клиент Тогда
		Состояние(""Загружаю данные из файла..."");
	#КонецЕсли 
	локТабЗнач = Новый ТаблицаЗначений;
	
	begCol = 0;
	begRow = 0;
	endCol = Sheet.Data.GetLength(6) - 1;
	endRow = Sheet.Data.GetLength() - 1;
	
	нКол = 0;
	локТабЗнач.Колонки.Очистить();
	
	КС = Новый КвалификаторыСтроки(50);
	Массив = Новый Массив;
	Массив.Добавить(Тип(""Строка""));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив, , КС);
	
	Пока нКол <= endCol Цикл
		ИмяКол = ""Колонка""+Строка(нкол+1);
		локТабЗнач.Колонки.Добавить(ИмяКол,ОписаниеТиповСтрока);
		нКол = нКол + 1;
	КонецЦикла;
	
	Range = Sheet.getCellRangeByPosition(begCol, begRow, endCol, endRow);
	
	МассивКом = Новый COMSafeArray(""VT_VARIANT"", Range.Columns.Count, Range.Rows.Count);
	МассивКом = Range.getDataArray();
	
	тмпПростойМассив = МассивКом.Выгрузить();
	
	Для каждого массив из тмпПростойМассив Цикл
		ит = 0;
		НовСтрока = локТабЗНач.Добавить();
		
		Для каждого ЭлементМассива из массив цикл
			НовСтрока[ит] = ЭлементМассива;
			ит = ит + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	//Если закрыватьServiceManager Тогда
	ServiceManager = Неопределено;
	//КонецЕсли; 
	Desktop.terminate();
	Desktop = Неопределено;
	
	Возврат локТабЗнач;
КонецФункции

Функция ПривестиФайлКУРЛ(Знач ПутьКФайлу)

    ПутьКФайлу = СтрЗаменить(ПутьКФайлу,"" "",""%20"");
    ПутьКФайлу = СтрЗаменить(ПутьКФайлу,""\"",""/"");
    Возврат ""file:/"" + ""/localhost/"" + ПутьКФайлу;

Конецфункции
"}
}
},
{0,
{"Индикация прогресса для цикла (ИР)",0,0,"","	индикатор = ЛксПолучитьИндикаторПроцесса(количество15798); // количество проходов
	
		ЛксОбработатьИндикатор(индикатор); //в цикле автоматом выполняю ОбработкаПрерыванияПользователя();

	//ЛксСообщитьИтогИндикации(индикатор);
"}
},
{0,
{"Индикация прогресса в строке состояния",0,0,"","//от Абадонны и Душелова - и просто и гениально и быстро и штатно - вызов и работа индикатора строки состояния:
// http://infostart.ru/public/59581/
Процедура КнопкаВыполнитьНажатие(Кнопка) 
   ПР=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
   Пр.ОтображатьПроцентВывода=Истина ; 
   Эл=Новый ЭлементРезультатаКомпоновкиДанных; 
    
   ПР.НачатьВывод(); 
   Для А=1 По 100 Цикл 
      Эл.ПроцентВывода=А; 
      //задержка, чтобы разглядеть 
      Для Б=1 По 10000 Цикл КонецЦикла; 
      ПР.ВывестиЭлемент(Эл); 
   КонецЦикла 
   ПР.ЗакончитьВывод(); 
КонецПроцедуры"}
},
{0,
{"Блок методов ""Регулярные выражения"" RegExp",0,0,""," 
// ======================= ======================= ======================= ======================= 
//
// БЛОК РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ
//
// ======================= ======================= ======================= ======================= 

Процедура РегулярныеВыражения_Инициализация (RegExp, Шаблон, ИскатьДоПервогоСовпадения = Истина, МногоСтрок = Истина, ИгнорироватьРегистр = Истина) //Экспорт

    Если RegExp = Неопределено Тогда //Нужна инициализация
        RegExp = Новый COMОбъект(""VBScript.RegExp"");    // создаем объект для работы с регулярными выражениями
    КонецЕсли;

    //Заполняем данные
    RegExp.MultiLine = МногоСтрок;                  // истина — текст многострочный, ложь — одна строка
    RegExp.Global = Не ИскатьДоПервогоСовпадения;   // истина — поиск по всей строке, ложь — до первого совпадения
    RegExp.IgnoreCase = ИгнорироватьРегистр;        // истина — игнорировать регистр строки при поиске
    RegExp.Pattern = Шаблон;                        // шаблон (регулярное выражение)

КонецПроцедуры

Функция РегулярныеВыражения_Проверка(RegExp, ПроверяемыйТекст) //Экспорт

    Возврат RegExp.Test(ПроверяемыйТекст);

КонецФункции

Функция РегулярныеВыражения_Выполнить(RegExp, АнализируемыйТекст) //Экспорт

    РезультатАнализаСтроки = RegExp.Execute(АнализируемыйТекст);

    МассивВыражений = Новый Массив;

    Для Каждого Выражение Из РезультатАнализаСтроки Цикл
        СтруктураВыражение = Новый Структура (""Начало, Длина, Значение, ПодВыражения"", Выражение.FirstIndex, Выражение.Length,Выражение.Value);

        //Обработка подвыражений
        МассивПодВыражений = Новый Массив;
        Для Каждого ПодВыражение Из Выражение.SubMatches Цикл
            МассивПодВыражений.Добавить(ПодВыражение);
        КонецЦикла;
        СтруктураВыражение.ПодВыражения = МассивПодВыражений;

        МассивВыражений.Добавить (СтруктураВыражение);

    КонецЦикла;

    Возврат МассивВыражений;

КонецФункции
 
// ======================= ======================= ======================= ======================= 
//
// КОНЕЦ БЛОКА РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ
//
// ======================= ======================= ======================= ======================= 

"}
},
{2,
{"Дуэт",1,0,"",""},
{0,
{"Работа с товарами без кодов при выгрузке",0,0,"","Перем	_ТаблицаТоваровБезКодовПроизводителя;

Процедура СоздатьТаблицуТоваровБезКодовПроизводителя()
	_ТаблицаТоваровБезКодовПроизводителя = Новый ТаблицаЗначений;
	_ТаблицаТоваровБезКодовПроизводителя.Колонки.Добавить(""Товар"");
	_ТаблицаТоваровБезКодовПроизводителя.Колонки.Добавить(""ТоварНаименование"");
	_ТаблицаТоваровБезКодовПроизводителя.Колонки.Добавить(""ТоварКод"");
	_ТаблицаТоваровБезКодовПроизводителя.Колонки.Добавить(""ОбозначениеОшибки"");
КонецПроцедуры

Процедура ДобавитьТоварБезКодовПроизводителяВТаблицу(ОбозначениеОшибки, Товар, ТоварКод)
	гФлагОшибокПриВыгрузке = Истина;
	Если _ТаблицаТоваровБезКодовПроизводителя.Найти(Товар, ""Товар"") = Неопределено Тогда
		НоваяСтрока = _ТаблицаТоваровБезКодовПроизводителя.ДОбавить();
		НоваяСтрока.Товар = Товар;
		НоваяСтрока.ТоварНаименование = СокрЛП(Товар.Наименование);
		НоваяСтрока.ТоварКод = ТоварКод;
		НоваяСтрока.ОбозначениеОшибки = ОбозначениеОшибки;
	КонецЕсли; 
КонецПроцедуры
 
Процедура ПоказатьВсеТоварыБезКодовПроизводителя()
	Для каждого Строка Из _ТаблицаТоваровБезКодовПроизводителя Цикл
		ВывестиСообщение(""ВНИМАНИЕ:		""+Строка.ОбозначениеОшибки+"": Нет кода производителя у товара <"" + Строка.ТоварНаименование+"">, код <""+Строка.ТоварКод+"">"");
	КонецЦикла; 
КонецПроцедуры
"}
},
{0,
{"РаботаемВОтладочнойБазе - функция",0,0,"","Функция РаботаемВОтладочнойБазе() Экспорт
	ПутьИБ = УправлениеСоединениямиИБ.ПутьКИнформационнойБазе(); // строка типа ""server1c\duet"" (с кавычками)
		артТесты.ПроверитьИстину(НЕ ОпределитьЭтаИнформационнаяБазаФайловая(), ""Обработка рассчитана только на клиент-серверный вариант работы 1С"");
	ПутьИБ = СтрЗаменить(ПутьИБ, """""""", """");
	ПодстрокиПутиИБ  = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПутьИБ, ""\"");
	
	имяИБ = НРег(ПодстрокиПутиИБ[1]); //имяСервера = ПодстрокиПутиИБ[0];
		//артТесты.ПроверитьИстину(имяИБ = ""artbear_duet"" ИЛИ имяИБ = ""duet"", ""Неверное имя информационной базы"");
	отладочнаяБаза = Найти(имяИБ, ""artbear"") <> 0 ИЛИ Найти(имяИБ, ""debug"") <> 0 ИЛИ Найти(имяИБ, ""test"") <> 0;
	Возврат отладочнаяБаза; //имяИБ <> ""duet"";
КонецФункции
"}
}
},
{0,
{"Ввод по строке ( Удобный !! )",0,0,"","
// ======================= ======================= ======================= ======================= 
//
// БЛОК "" ВВОД ПО СТРОКЕ ""
// 		[8.1] Ввод по подстроке (альтернативный, расширенный) Evg-Lylyk
// 		http://infostart.ru/public/88043/
//
//		Все, что требуется - установить обработчик событие ""ОкончаниеВводаТекста"" на метод ВводПоСтроке_ОкончаниеВводаТекста
//
// ======================= ======================= ======================= ======================= 

Процедура ВводПоСтроке_ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	//Введен пустой текст ничего не делаем
	Если Текст = """" Тогда
		Возврат;
	КонецЕсли;
	
	
	//Запомним текущее значение (оно нам еще понадобится)
	ТекущееЗначение = Элемент.Значение;
	
	//Получим массив значений соответствующий введенному тексту
	ПодходящиеЗначения = ВводПоСтроке_НайтиПодходящиеЗначения(Элемент, Текст, Значение, СтандартнаяОбработка);
	
	Если ПодходящиеЗначения = Неопределено Тогда //Данный тип объектов не обрабатываем
		Возврат;
	КонецЕсли;
	
	//Будем все сами обрабатывать (Стандартная обработка не нужна)
	СтандартнаяОбработка = Ложь;
	
	КоличествоЗначенийДляВыбора = ПодходящиеЗначения.Количество();
	
	Если КоличествоЗначенийДляВыбора = 0 Тогда
		//Пользователь ввел не найд. текст Открываем форму выбора
		//Форма = Справочники.ТестовыйСправочник.ПолучитьФормуВыбора(,Элемент,"""");
	   НайденныйОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ТекущееЗначение)); 
	   Если Метаданные.Справочники.Содержит(НайденныйОбъектМетаданных) Тогда //Справочник 
	      Форма = Справочники[НайденныйОбъектМетаданных.Имя].ПолучитьФормуВыбора(,Элемент,""""); 
	   ИначеЕсли Метаданные.Документы.Содержит(НайденныйОбъектМетаданных) Тогда //Документ 
	      Форма = Документы[НайденныйОбъектМетаданных.Имя].ПолучитьФормуВыбора(,Элемент,""""); 
	   КонецЕсли;   		
		ВыбранноеЗначение = Форма.ОткрытьМодально();
		Значение = ? (ВыбранноеЗначение = Неопределено, ТекущееЗначение, ВыбранноеЗначение);
	ИначеЕсли КоличествоЗначенийДляВыбора = 1 Тогда
		//Подходит всего одно значение
		Значение = ПодходящиеЗначения[0].Значение;
	ИначеЕсли КоличествоЗначенийДляВыбора <= 50  Тогда
		//Значений в списке не более 50
		ВыбранноеЗначение = ВыбратьИзСписка(ПодходящиеЗначения, Элемент);
		Значение = ?(ВыбранноеЗначение = Неопределено, ТекущееЗначение, ВыбранноеЗначение.Значение);
	Иначе
		//Найденно более 50 элементов
		Предупреждение (""Найдено более 50 значений
		|Задайте более длинную строку поиска или воспользуйтесь кнопкой выбора"");
	КонецЕсли;

КонецПроцедуры

Функция ВводПоСтроке_НайтиПодходящиеЗначения(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	НайденныйОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Значение));
	
	Если НайденныйОбъектМетаданных <> Неопределено Тогда
		
			//Если НайденныйОбъектМетаданных.ВводПоСтроке.Количество() = 0 Тогда
			//	Возврат Неопределено;
			//КонецЕсли;
		
		СЗ = Новый СписокЗначений;
		
		ШаблонЗапроса = ""ВЫБРАТЬ ПЕРВЫЕ 51
		|ТаблицаПоиска.Ссылка КАК Значение%ДополнительныеПоля%
		| ИЗ "" + НайденныйОбъектМетаданных.ПолноеИмя() + "" КАК ТаблицаПоиска
		| ГДЕ %Условия%"";
		
		структураДополнительныхПолейВвода = Новый Структура;
		естьЧисловойКод = """"+НайденныйОбъектМетаданных.ТипНомера = ""Число"";
		Если Метаданные.Справочники.Содержит(НайденныйОбъектМетаданных) Тогда //Справочник
			ДополнительныеПоля = "",ТаблицаПоиска.Код, ТаблицаПоиска.ПометкаУдаления, ТаблицаПоиска.Предопределенный"";
			структураДополнительныхПолейВвода.Вставить(""Код"", """"+НайденныйОбъектМетаданных.ТипНомера);
			структураДополнительныхПолейВвода.Вставить(""Наименование"", ""Строка"");
			
			Условия = ВводПоСтроке_СформироватьТекстУсловийДляЗапроса(НайденныйОбъектМетаданных, структураДополнительныхПолейВвода);
		ИначеЕсли Метаданные.Документы.Содержит(НайденныйОбъектМетаданных) Тогда //Документ
			ДополнительныеПоля = "",ТаблицаПоиска.Номер, ТаблицаПоиска.ПометкаУдаления, ТаблицаПоиска.Проведен"";
			структураДополнительныхПолейВвода.Вставить(""Номер"", """"+НайденныйОбъектМетаданных.ТипНомера);

			Условия = ВводПоСтроке_СформироватьТекстУсловийДляЗапроса(НайденныйОбъектМетаданных, структураДополнительныхПолейВвода);
		КонецЕсли;
		Если ПустаяСтрока(Условия) Тогда
			Условия = ""Истина"";
		КонецЕсли; 
		
		//Подготавливаем текст запроса заполняем шаблон
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса,""%ДополнительныеПоля%"", ДополнительныеПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,""%Условия%"", Условия);
		
		ИщемТекст = Текст;
		ИщемТекст = СтрЗаменить(ИщемТекст, ""%"", Символ(255) + ""%"");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр(""СтрокаПоиска"", ""%"" + ИщемТекст + ""%"");
		
		Если естьЧисловойКод Тогда
			Попытка
				текстЧисло = Число(Текст);
			Исключение
				текстЧисло = -1;
			КонецПопытки;
			Запрос.УстановитьПараметр(""ЧислоПоиска"", текстЧисло);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
			//Сообщить(""ТекстЗапроса = <""+?(ТекстЗапроса = Неопределено, ""Неопределено"", ТекстЗапроса)+"">""); 		
		Результат = Запрос.Выполнить();
		
		Для Каждого Строка Из Результат.Выгрузить() Цикл
			ВводПоСтроке_ДобавитьВСписокЗначениеДополнивЕго(СЗ, Строка, НайденныйОбъектМетаданных);
		КонецЦикла;
		
		Возврат СЗ;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВводПоСтроке_ДобавитьВСписокЗначениеДополнивЕго(СЗ, Строка, НайденныйОбъектМетаданных)
	
	Если Метаданные.Справочники.Содержит(НайденныйОбъектМетаданных) Тогда //Справочник
		
		Представление = ""(""+СокрЛП(Строка.Код)+"") "" + Строка.Значение;
		
		Попытка
			Если Строка.ПометкаУдаления Тогда
				Картинка = БиблиотекаКартинок.СправочникПометкаУдаления;
			ИначеЕсли Строка.Предопределенный Тогда 
				Картинка = БиблиотекаКартинок.СправочникПредопределенный;
			Иначе
				Картинка = БиблиотекаКартинок.СправочникЭлемент;
			КонецЕсли;
		Исключение
			Картинка = Неопределено;
		КонецПопытки;
		
	ИначеЕсли Метаданные.Документы.Содержит(НайденныйОбъектМетаданных) Тогда //Документ
		
		Представление = Неопределено;
		
		Попытка
			Если Строка.Проведен Тогда 
				Картинка = БиблиотекаКартинок.ДокументПроведен;
			ИначеЕсли Строка.ПометкаУдаления Тогда
				Картинка = БиблиотекаКартинок.ДокументПометкаУдаления
			Иначе
				Картинка = БиблиотекаКартинок.ДокументНеПроведен
			КонецЕсли;
		Исключение
			Картинка = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	СЗ.Добавить(Строка.Значение, Представление,, Картинка);
	
КонецПроцедуры	

Функция ВводПоСтроке_СформироватьТекстУсловийДляЗапроса(ОбъектМетаданных, структураДополнительныхПолейВвода)
	
	Текст = """";
	
	Для Каждого Поле Из ОбъектМетаданных.ВводПоСтроке Цикл
		
		Если Не ПустаяСтрока(Текст) Тогда
			Текст = Текст + "" ИЛИ "";
		КонецЕсли;
		типПоля = ""Строка"";
		структураДополнительныхПолейВвода.Свойство(Поле.Имя, типПоля);
		
		Если типПоля = ""Строка"" или ПустаяСтрока(типПоля) Тогда
			Текст = Текст + ""ТаблицаПоиска."" + Поле.Имя + "" ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ """"""+Символ(255)+"""""""";
		ИначеЕсли типПоля = ""Число"" Тогда
			Текст = Текст + ""ТаблицаПоиска."" + Поле.Имя + "" = &ЧислоПоиска ""; // СПЕЦСИМВОЛ """"""+Символ(255)+"""""""";
		Иначе
			Текст = Текст + "" Истина "";
		КонецЕсли; 
			//Текст = Текст + ""ТаблицаПоиска."" + Поле.Имя + "" ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ """"""+Символ(255)+"""""""";
	КонецЦикла;
	
	Для Каждого Поле Из структураДополнительныхПолейВвода Цикл
		
		Если Не ПустаяСтрока(Текст) Тогда
			Текст = Текст + "" ИЛИ "";
		КонецЕсли;
		
		типПоля = Поле.Значение;
		Если типПоля = ""Строка"" или ПустаяСтрока(типПоля) Тогда
			Текст = Текст + ""ТаблицаПоиска."" + Поле.Ключ + "" ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ """"""+Символ(255)+"""""""";
		ИначеЕсли типПоля = ""Число"" Тогда
			Текст = Текст + ""ТаблицаПоиска."" + Поле.Ключ + "" = &ЧислоПоиска ""; // СПЕЦСИМВОЛ """"""+Символ(255)+"""""""";
		Иначе
			Текст = Текст + "" Истина "";
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// ======================= ======================= ======================= ======================= 
//
// КОНЕЦ БЛОКА "" ВВОД ПО СТРОКЕ ""
//
// ======================= ======================= ======================= ======================= 
"}
},
{0,
{"Проверить битую ссылку",0,0,"","//  Проверить битую ссылку
//	Если не ОбъектБДСуществует(ТвояСсылка) тогда
//   Сообщить(""""+ТвояСсылка+"" - битая ссылка"",СтатусСообщения.ОченьВажное);
Функция ОбъектБДСуществует(ТестоваяСсылка) 
    ИмяОбъекта = ТестоваяСсылка.Метаданные().Имя;
    ПолноеИмяОбъекта = ТестоваяСсылка.Метаданные().ПолноеИмя();

    Запрос = новый Запрос();
    Запрос.Текст =
    ""ВЫБРАТЬ
    |   ИСТИНА КАК СсылкаБДСуществует
    |ИЗ
    |   "" + ПолноеИмяОбъекта + "" КАК "" + ИмяОбъекта + ""
    |ГДЕ
    |   "" + ИмяОбъекта + "".Ссылка = &Cсылка"";
    Запрос.УстановитьПараметр(""Cсылка"", ТестоваяСсылка);
    РезультатЗапроса = Запрос.Выполнить();

    Возврат Не РезультатЗапроса.Пустой();

КонецФункции"}
},
{0,
{"Определить версию платформы",0,0,"","// Возвращает Истина, если 8.1, Ложь, если 8.2
Функция ЭтоПлатформа_81() Экспорт
	Перем локальная;
	этоПлатформа_81 = Истина;
	Попытка
		Выполнить(""локальная = Метаданные.РежимСовместимости"");		
		этоПлатформа_81 = Ложь;
	Исключение
	КонецПопытки; 
	Возврат этоПлатформа_81;
КонецФункции
"}
},
{0,
{"Документ для разработки (Intellisense)",0,0,"","#Если НЕ (Клиент Или Сервер Или ВнешнееСоединение) Тогда  //УДАЛИТЬ
   <?""ИмяПеременной""> = Документы.<?"""", Документ>.ПустаяСсылка();
#КонецЕсли"}
},
{0,
{"Справочник для разработки (Intellisense)",0,0,"","#Если НЕ (Клиент Или Сервер Или ВнешнееСоединение) Тогда  //УДАЛИТЬ
   <?""ИмяПеременной""> = Справочники.<?"""", Справочник>.ПустаяСсылка();
#КонецЕсли"}
},
{0,
{"Функция ПолучитьВнешнийОбъектИзСправочникаВнешнихОбработок",0,0,"","#Если Клиент Тогда
	
//пример вызова
//	имяОтчетаВСправочнике = ""Загрузка табеля из Excel"";
//	видОтчета = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
//	нужныйОбъект = артМодули.ПолучитьВнешнийОбъектИзСправочникаВнешнихОбработок(имяОтчетаВСправочнике, видОтчета);
//	нужныйОбъект.ПолучитьФорму().Открыть();
Функция ПолучитьВнешнийОбъектИзСправочникаВнешнихОбработок(имяОтчетаВСправочнике, ВидОбработки) Экспорт
		артТесты.ПроверитьЗаполненность(имяОтчетаВСправочнике, ""имяОтчетаВСправочнике"");
		артТесты.ПроверитьЗаполненность(ВидОбработки, ""ВидОбработки"");
	данные = НайтиДанныеЭлементаСправочникаПоНаименованию(имяОтчетаВСправочнике, ВидОбработки);
		артТесты.ПроверитьЗаполненность(данные, ""данные"");
		
	ЭтоОбработка = ?(ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка, Истина, Ложь);
	ЭтоОтчет = ?(ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет, Истина, Ложь);
	
	Если НЕ (ЭтоОбработка ИЛИ ЭтоОтчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = данные.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
			//Если ЭтоОбработка Тогда
			//	
			//	Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
			//	
			//Иначе
			//	
			//	Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
			//	
			//КонецЕсли;
			//
			//Если Не Форма = Неопределено Тогда
			//	
			//	Объект = Форма;//Форма.Открыть();
			//	
			//Иначе
			
		Если ЭтоОбработка Тогда
			Объект = ВнешниеОбработки.Создать(ИмяФайла);
				артТесты.ПроверитьРавенство(Найти(ТипЗнч(Объект), ""Внешняя обработка""), 1, ""ТипЗнч(Объект)"");
		Иначе
			Объект = ВнешниеОтчеты.Создать(ИмяФайла);
				артТесты.ПроверитьРавенство(Найти(ТипЗнч(Объект), ""Внешний отчет""), 1, ""ТипЗнч(Объект)"");
		КонецЕсли;
			
			артТесты.ПроверитьЗаполненность(Объект.ИспользуемоеИмяФайла, ""Объект.ИспользуемоеИмяФайла"");
			//КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		Возврат Объект;
		
	Исключение
		
		Если ЭтоОбработка Тогда
			
			ВызватьИсключение(""Выбранный файл не является внешней обработкой.
						   |Либо, данная обработка не предназначена для
						   |запуска в этой конфигурации."");
		Иначе
			ВызватьИсключение(""Выбранный файл не является внешним отчетом.
						   |Либо, данный отчет не предназначена для
						   |запуска в этой конфигурации."");
		КонецЕсли;
		
	КонецПопытки;
	Возврат Неопределено;	
КонецФункции

#КонецЕсли 
"}
},
{5,
{"Алгоритмы",1,0,"",""},
{0,
{"Вывести на экран табличный документ или массив документов",0,0,"","Процедура ПоказатьНаЭкране(табДокИлиМассивТабДок)
	массив = Новый Массив;
	ДобавитьТабличныеДокументыВКоллекцию(массив, табДокИлиМассивТабДок);
	
	Если _тестируем Тогда
		глОбщиеЗначения.Вставить(""глТестированиеЗапущено"", Ложь);
	КонецЕсли;
	
	Для каждого табДок Из массив Цикл
		артМодули.НапечататьДокумент(табДок);
	КонецЦикла;
КонецПроцедуры

// табДокИлиМассивТабДок - или неопределено, или ТабличныйДокумент или Массив или Соответствие 
// если Соответствие, то ключ - сам ТабличныйДокумент, а значение - это количество для печати (0==1, 1 или больше)
Процедура ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, табДокИлиМассивТабДок, создаватьДубли = Истина)
	табДок = табДокИлиМассивТабДок;
	
		артТесты.ПроверитьИстину(ТипЗнч(табДок) = Тип(""ТабличныйДокумент"") ИЛИ ТипЗнч(табДок) = Тип(""Массив"") ИЛИ ТипЗнч(табДок) = Тип(""Соответствие"")
			ИЛИ табДок = Неопределено);

	Если ТипЗнч(табДок) = Тип(""Массив"") Тогда
		Для каждого элемТабДок Из табДок Цикл
				артТесты.ПроверитьИстину(ТипЗнч(элемТабДок) = Тип(""ТабличныйДокумент"") ИЛИ элемТабДок = Неопределено);
			Если элемТабДок = Неопределено Тогда Продолжить; КонецЕсли;
			
			Если создаватьДубли Тогда
				коллекцияТабДок.Добавить(ПолучитьДубльТабличногоДокумента(элемТабДок));
			Иначе
				коллекцияТабДок.Добавить(элемТабДок);
			КонецЕсли;
			//ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, табДокИлиМассивТабДок)
		КонецЦикла; 

	ИначеЕсли ТипЗнч(табДок) = Тип(""Соответствие"") Тогда
		Для каждого ключЗначение Из табДок Цикл
			табДокДляПечати = ключЗначение.Ключ;
			количествоДляПечати = ключЗначение.Значение;
				артТесты.ПроверитьИстину(ТипЗнч(табДокДляПечати) = Тип(""Массив"") ИЛИ ТипЗнч(табДокДляПечати) = Тип(""ТабличныйДокумент"") ИЛИ табДокДляПечати = Неопределено);
				артТесты.ПроверитьБольшеИлиРавно(количествоДляПечати, 0, ""количествоДляПечати"");
			Если табДокДляПечати = Неопределено Тогда Продолжить; КонецЕсли;
			
			количествоДляПечати = ?(количествоДляПечати = 0, 1, количествоДляПечати);
			
			Если ТипЗнч(табДокДляПечати) = Тип(""ТабличныйДокумент"") Тогда
				Пока количествоДляПечати > 0 Цикл
					ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, табДокДляПечати, Истина);
					количествоДляПечати = количествоДляПечати - 1;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
				артТесты.ПроверитьТип(табДокДляПечати, ""Массив"");
			новыйМассивТабДок = Новый Массив;
			Для каждого лТабДок Из табДокДляПечати Цикл
				количествоДляПечатиСчетчик = количествоДляПечати;
				Пока количествоДляПечатиСчетчик > 0 Цикл
					ДобавитьТабличныеДокументыВКоллекцию(новыйМассивТабДок, лТабДок, Истина);
					количествоДляПечатиСчетчик = количествоДляПечатиСчетчик - 1;
				КонецЦикла;
			КонецЦикла;
			
			ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, новыйМассивТабДок);
		КонецЦикла; 
	Иначе
		Если табДок <> Неопределено Тогда
			
			Если создаватьДубли Тогда
				коллекцияТабДок.Добавить(ПолучитьДубльТабличногоДокумента(табДок));
			Иначе
				коллекцияТабДок.Добавить(табДок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьДубльТабличногоДокумента(исхТабДок)
	новыйТабДок = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(новыйТабДок, исхТабДок);
	новыйТабДок.Вывести(исхТабДок);
	Возврат новыйТабДок;
КонецФункции
"}
},
{0,
{"Получить дубль табличного документа",0,0,"","// функция нужна из-за того, что Таб.Показать показывает всегда только одну версию на экране
Функция ПолучитьДубльТабличногоДокумента(исхТабДок)
	новыйТабДок = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(новыйТабДок, исхТабДок);
	новыйТабДок.Вывести(исхТабДок);
	Возврат новыйТабДок;
КонецФункции
"}
},
{0,
{"Добавить табличные документы в коллекцию",0,0,"","// табДокИлиМассивТабДок - или неопределено, или ТабличныйДокумент или Массив или Соответствие 
// если Соответствие, то ключ - сам ТабличныйДокумент, а значение - это количество для печати (0==1, 1 или больше)
Процедура ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, табДокИлиМассивТабДок, создаватьДубли = Истина)
	табДок = табДокИлиМассивТабДок;
	
		артТесты.ПроверитьИстину(ТипЗнч(табДок) = Тип(""ТабличныйДокумент"") ИЛИ ТипЗнч(табДок) = Тип(""Массив"") ИЛИ ТипЗнч(табДок) = Тип(""Соответствие"")
			ИЛИ табДок = Неопределено);

	Если ТипЗнч(табДок) = Тип(""Массив"") Тогда
		Для каждого элемТабДок Из табДок Цикл
				артТесты.ПроверитьИстину(ТипЗнч(элемТабДок) = Тип(""ТабличныйДокумент"") ИЛИ элемТабДок = Неопределено);
			Если элемТабДок = Неопределено Тогда Продолжить; КонецЕсли;
			
			Если создаватьДубли Тогда
				коллекцияТабДок.Добавить(ПолучитьДубльТабличногоДокумента(элемТабДок));
			Иначе
				коллекцияТабДок.Добавить(элемТабДок);
			КонецЕсли;
			//ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, табДокИлиМассивТабДок)
		КонецЦикла; 

	ИначеЕсли ТипЗнч(табДок) = Тип(""Соответствие"") Тогда
		Для каждого ключЗначение Из табДок Цикл
			табДокДляПечати = ключЗначение.Ключ;
			количествоДляПечати = ключЗначение.Значение;
				артТесты.ПроверитьИстину(ТипЗнч(табДокДляПечати) = Тип(""Массив"") ИЛИ ТипЗнч(табДокДляПечати) = Тип(""ТабличныйДокумент"") ИЛИ табДокДляПечати = Неопределено);
				артТесты.ПроверитьБольшеИлиРавно(количествоДляПечати, 0, ""количествоДляПечати"");
			Если табДокДляПечати = Неопределено Тогда Продолжить; КонецЕсли;
			
			количествоДляПечати = ?(количествоДляПечати = 0, 1, количествоДляПечати);
			
			Если ТипЗнч(табДокДляПечати) = Тип(""ТабличныйДокумент"") Тогда
				Пока количествоДляПечати > 0 Цикл
					ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, табДокДляПечати, Истина);
					количествоДляПечати = количествоДляПечати - 1;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
				артТесты.ПроверитьТип(табДокДляПечати, ""Массив"");
			новыйМассивТабДок = Новый Массив;
			Для каждого лТабДок Из табДокДляПечати Цикл
				количествоДляПечатиСчетчик = количествоДляПечати;
				Пока количествоДляПечатиСчетчик > 0 Цикл
					ДобавитьТабличныеДокументыВКоллекцию(новыйМассивТабДок, лТабДок, Истина);
					количествоДляПечатиСчетчик = количествоДляПечатиСчетчик - 1;
				КонецЦикла;
			КонецЦикла;
			
			ДобавитьТабличныеДокументыВКоллекцию(коллекцияТабДок, новыйМассивТабДок);
		КонецЦикла; 
	Иначе
		Если табДок <> Неопределено Тогда
			
			Если создаватьДубли Тогда
				коллекцияТабДок.Добавить(ПолучитьДубльТабличногоДокумента(табДок));
			Иначе
				коллекцияТабДок.Добавить(табДок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры


Функция ПолучитьДубльТабличногоДокумента(исхТабДок)
	новыйТабДок = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(новыйТабДок, исхТабДок);
	новыйТабДок.Вывести(исхТабДок);
	Возврат новыйТабДок;
КонецФункции
"}
},
{0,
{"Подсчитать количество страниц",0,0,"","Функция ПодсчитатьКоличествоСтраниц(массивТабличныхДокументов) Экспорт
	количествоСтраниц = 0;
	
	индикатор = ЛксПолучитьИндикаторПроцесса(массивТабличныхДокументов.количество()); // количество проходов
	Для каждого табДок Из массивТабличныхДокументов Цикл
		ЛксОбработатьИндикатор(индикатор); //в цикле автоматом выполняю ОбработкаПрерыванияПользователя();
		
		количествоСтраниц = количествоСтраниц + табДок.КоличествоСтраниц();
	КонецЦикла;
	Возврат количествоСтраниц;
КонецФункции
"}
},
{0,
{"Sleep",0,1,"","Процедура Sleep(секунд)
	Шел=Новый COMОбъект(""WScript.Shell"");
	Шел.run(""ping -n "" + Формат(секунд, ""ЧДЦ=0; ЧГ="") + "" -w 2000 0.0.0.1"",0,-1);
		//Шел.run(""timeout /t 2"",0,-1); //1 секунда
		//Шел.run(""choice /t 2 /d y"",0,-1); //1 секунда
КонецПроцедуры
"}
}
},
{1,
{"СКД",1,0,"",""},
{0,
{"ПолучитьДанныеНаОснованииСКД - программное получение данных по СКД",0,0,"","// {{****************************************************************************
//    ШАБЛОНЫ ДЛЯ ИСПОЛЬЗОВАНИЯ СКД - http://infostart.ru/public/80164/
// 
//****************************************************************************
// Заполняет переданный объект на основании СКД
//
// Параметры
//
//  схемаСКД – схема СКД
//
//  ОбъектДляЗагрузки – объект в который выгружаются данные, таблица значений, дерево значений, табличный документ
//
//  ИсполняемыеНастройки – Пользовательские настройки СКД, если не указаны, будут использованы настройки СКД по умолчанию
//
//  СтруктураПараметров - Структура – Передаваемые для СКД параметры
//
//	В итоге получение данных сводится к трем простым действиям:
//		1. Написать запрос и настроить СКД  
//	в любой консоли, позволяющей это сделать.
//		2. Выгрузить настройки из консоли и загрузить в макет
//		3. Написать в необходимом месте код типа:
//
//		ДеревоЗначений = Новый ДеревоЗначений;
//		СхемаКомпоновкиДанных = ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
//		СтруктураПараметров = Новый Структура(""ДатаОтчета"", НашаДата);
//		ПолучитьДанныеНаОснованииСКД(СхемаКомпоновкиДанных, ДеревоЗначений, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, СтруктураПараметров);
//
Процедура ПолучитьДанныеНаОснованииСКД(схемаСКД, ОбъектДляЗагрузки, ИсполняемыеНастройки = Неопределено, СтруктураПараметров = Неопределено, РасшифровкаСКД = Неопределено, МакетКомпоновки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип(""ПолеТабличногоДокумента"") ИЛИ ТипЗнч(ОбъектДляЗагрузки) = Тип(""ТабличныйДокумент"") Тогда
        ТипГенератора = Тип(""ГенераторМакетаКомпоновкиДанных"");
    Иначе
        ТипГенератора = Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"");
    КонецЕсли;

    Если ИсполняемыеНастройки = Неопределено Тогда

        ИсполняемыеНастройки = схемаСКД.НастройкиПоУмолчанию;

    КонецЕсли;

    Если СтруктураПараметров <> Неопределено Тогда

        КоллекцияЗначенийПараметров = ИсполняемыеНастройки.ПараметрыДанных.Элементы;

        Для каждого Параметр Из СтруктураПараметров Цикл

            НайденноеЗначениеПараметра = КоллекцияЗначенийПараметров.Найти(Параметр.Ключ);

            Если НайденноеЗначениеПараметра <> Неопределено Тогда

                НайденноеЗначениеПараметра.Использование = Истина;

                НайденноеЗначениеПараметра.Значение = Параметр.Значение;

            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    МакетКомпоновкиСКД = КомпоновщикМакета.Выполнить(схемаСКД, ИсполняемыеНастройки, РасшифровкаСКД, МакетКомпоновки, ТипГенератора);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;

    ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиСКД, ВнешниеНаборыДанных, РасшифровкаСКД);

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип(""ПолеТабличногоДокумента"") ИЛИ ТипЗнч(ОбъектДляЗагрузки) = Тип(""ТабличныйДокумент"") Тогда

        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

        ПроцессорВывода.УстановитьДокумент(ОбъектДляЗагрузки);

    Иначе

        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

        ПроцессорВывода.УстановитьОбъект(ОбъектДляЗагрузки);

    КонецЕсли;

    ПроцессорВывода.ОтображатьПроцентВывода = Истина;

    результат1 = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

КонецПроцедуры // ПолучитьДанныеНаОснованииСКД()

//****************************************************************************
//
//************************************************************************* }}
 "}
}
}
}
}